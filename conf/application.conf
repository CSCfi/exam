# This is the main configuration file for the application.
# ~~~~~

########################################################################################################################
# Play framework related settings not specific to EXAM. Feel free to configure.
# ~~~~~

# Mail settings
play.mailer.host = smtp.uni.org
play.mailer.port = 465
play.mailer.ssl = yes
play.mailer.tls = yes
play.mailer.user = "user"
play.mailer.password = "password"
# To use mock, just uncomment, previous lines can be left as they are
#play.mailer.mock=true

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS
db.default.driver = org.postgresql.Driver
db.default.url = "jdbc:postgresql://localhost/sitnet"
db.default.username = sitnet
db.default.password = sitnet
# Log SQL statements yes/no
db.default.logStatements = false

# Number of database connections
# See https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
fixedConnectionPool = 10

# Set Hikari to fixed size
play.db {
  prototype {
    hikaricp.minimumIdle = ${fixedConnectionPool}
    hikaricp.maximumPoolSize = ${fixedConnectionPool}
  }
}

# Job queue sized to HikariCP connection pool
database.dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = ${fixedConnectionPool}
  }
}

# WS Request timeout in seconds
play.ws.timeout.connection = "10s"

# CORS configuration, enable and configure at will
#play.filters.cors {
#  pathPrefixes = ["/some/path", ...]
#  allowedOrigins = ["http://www.example.com", ...]
#  allowedHttpMethods = ["GET", "POST"]
#  allowedHttpHeaders = ["Accept"]
#  preflightMaxAge = 3 days
#}

########################################################################################################################
# EXAM specific configurations. Feel free to configure.
# ~~~~~

# EXAM defines 3 user roles:
# -STUDENT
# -TEACHER
# -ADMIN
#
# When user logs in the first time via authentication provider, accordingly a local user is created and saved in EXAM
# database. Different institutions use roles differently, that's why we need to map externally provided roles to EXAM
# roles. In the following configuration you can specify which external roles correspond to EXAM roles. In case multiple
# external roles are to be mapped to a single EXAM role, the names must be comma separated.
sitnet.roles = {
  student = [
    "student"
  ]
  teacher = [
    "faculty"
    "affiliate"
    "alum"
  ]
  admin = []
}

# Login type. At the moment only HAKA is supported in production environments.
sitnet.login = "HAKA"

# Hostname
sitnet.application.hostname = "http://uni.org"

# Attachment directory. If a relative path is provided, it shall be in relation to application root path.
# (<app_dir>/target/universal/stage in case of production environment)
sitnet.attachments.path = "/var/lib/exam/attachments"

# Link to base education system URL hosted by the educational organization. Used in some of the emails targeted for
# students.
sitnet.baseSystemURL = "http://base.uni.org"

# External course interface in use: true=on, false=off
sitnet.integration.courseUnitInfo.active = true
# URL configuration for the course interface(s). Each URL should have the course code either as path parameter or query
# parameter. Use ${course_code} for marking that part of the path.
# You can specify URLs on a per-organisation basis in order to use different URLs for users that are from different
# organisations. In that case the key should match with the code column of organisation relation in the database.
# "default" is used if no other match is found. You can remove the "default" key if you don't want a default URL at all.
sitnet.integration.courseUnitInfo.url = {
  default = "http://base.uni.org?courseCode=${course_code}"
  orgA = "http://a.uni.org?courseCode=${course_code}"
  orgB = "http://b.uni.org?courseCode=${course_code}"
}
# Enable / disable checking of permission to enroll for exams
sitnet.integration.enrolmentPermissionCheck.active = false
# Which user data to use as unique identifier. Permitted values are userIdentifier and eppn.
sitnet.integration.enrolmentPermissionCheck.id = "userIdentifier"
# URL for the API implementing this check. The URL should have the employee number and language (optional) either as
# path parameters or query parameters.
# Use ${employee_number} and ${employee_lang} for marking these parts of the path, respectively.
# Language shall be provided to remote API in ISO-861 code form (fi, sv, en etc)
# examples: https://x.y.z/enrolmentPermissions?id=${employee_number}&lang=${employee_lang}
#           https://x.y.z/enrolment/${employee_number}/permissions/${employee_lang}
# Response should provide EXAM with the identifiers for the courses that the person is allowed to enrol for.
# Any informational messages addressed to end user should be provided in the language defined by the provided
# language code.
sitnet.integration.enrolmentPermissionCheck.url = "https://uni.org/students/${employee_number}/enrolments?langcode=${employee_lang}"

# API key configuration for the above external interfaces (course import and enrolment permission).
# Optional. Will be passed as an HTTP header
sitnet.integration.apiKey = {
  enabled = false,
  name = "API_KEY",
  value = "somevalue"
}


# Interoperability (IOP) services configuration
# Hostname of the IOP server provided to you by development team
sitnet.integration.iop.host = "http://xm.org"
# Remote reference to your organisation provided to you by development tean
sitnet.integration.iop.organisationRef = "58a934c0e74c004753f50a9795f45327"
# Visiting examination support. true=service in use, false=service not in use
sitnet.integration.iop.visit.active = false
# Collaborative examination support. true=service in use, false=service not in use
sitnet.integration.iop.collaboration.active = false

# Application timezone, used for:
# - formatting timestamps in emails to users
# - setting default timezone for exam rooms, this affects how and when they are eligible for reservations
# - deciding the moment when user should be having an exam, system needs to take possible DST into consideration
# For allowed values see: http://joda-time.sourceforge.net/timezones.html
sitnet.application.timezone = "Europe/Helsinki"

# Exam durations available for choosing, in minutes. The order is the same as the one end user sees on UI.
# First duration is used as default.
sitnet.exam.durations = "45,90,110,180"

# Enable / disable possibility of users to override course grade scale for individual exams associated with the course.
sitnet.course.gradescale.overridable = true

# Mail address for the system, appears in From-header of emails sent by the app.
sitnet.email.system.account = "no-reply@exam.org"

# Maximum allowed attachment file size in bytes
sitnet.attachment.maxsize = 50000000

# Period after which processed exams (aborted, registered or archived) are marked as deleted and thus hidden from users.
# Value is to be provided in ISO 8601 duration format, default is six months
sitnet.exam.expiration.period = "P6M"

# Enable / disable anonymous review process globally.
sitnet.exam.anonymousReview = false

# Enable / disable support for multiple student IDs. By default exam parses only the last ID it gets from authentication
# provider. Enabling this support allows for reading in all the IDs provided should there be multiple ones.
sitnet.user.studentIds.multiple.enabled = false
# Organisations associated with student IDs. A comma separated list of organisations. IDs will be presented on the UI
# using this order
sitnet.user.studentIds.multiple.organisations = "org1.org,org2.org,org3.org"

# BYOD Examination
# Enable / disable support for BYOD examination
sitnet.byod.active = false
# SEB configuration
#
# Encryption key for internal storage of examination event specific SEB setting passwords. Please replace with
# something stronger.
sitnet.exam.seb.settingsPwd.encryption.key = "changeme"
# Link for quitting SEB after having returned the exam. Displayed for students on the EXAM UI.
sitnet.exam.seb.quitLink = "http://quit.seb.now"
# SEB client quit password. Define one if you insist that supervisors can enter it for quitting student's SEB client
# during exam. Please bear in mind that if a student gets access to this password, then nothing technically prevents her
# from quitting SEB, leaving the examination event, restarting SEB and finishing the exam elsewhere without supervision.
# Regardless of this password there's always the above quit link (sitnet.exam.seb.quitLink) for quitting SEB in a
# controlled manner.
sitnet.exam.seb.quitPwd = ""
# SEB configuration admin password. Used to protect generated SEB configuration files so that regular users can not view
# the contents using SEB configuration tool. Even if they could, modifications would not work because exam verifies that
# client's configuration is unaltered. You may also choose to use randomized admin passwords in case you wish that SEB
# configurations should not be viewed by anyone.
sitnet.exam.seb.adminPwd = { randomize = false, value = "changeme" }


########################################################################################################################
# Internal settings, there should not be any reason to change these unless you really know what you are doing.
# ~~~~~

# Modules
play.http.errorHandler = "backend.system.SystemErrorHandler"
play.http.actionCreator = "backend.system.SystemRequestHandler"
play.http.filters = "backend.system.AppFilters"
# play.filters.enabled += "play.filters.csp.CSPFilter"
play.modules.enabled += "backend.system.App"
play.modules.enabled += "backend.system.modules.ConfigReaderModule"
play.modules.enabled += "backend.system.modules.FileHandlerModule"
play.modules.enabled += "backend.system.modules.ByodConfigModule"
play.modules.enabled += "backend.system.modules.MoodleXmlConverterModule"
play.modules.enabled += "be.objectify.deadbolt.java.DeadboltModule"
play.modules.enabled += "backend.security.DeadboltHook"

# Application languages
# ~~~~~
play.i18n.langs = ["fi", "sv", "en"]

# Max disk buffer size, need to take exam max attachment file size setting into account with this
play.http.parser.maxDiskBuffer = ${sitnet.attachment.maxsize}

# Max size of request payload. Default is 100K but we increase it somewhat because collaborative exam
# use cases may require the client to occasionally send large-ish payloads towards server.
play.http.parser.maxMemoryBuffer = 256K

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
ebean.default = ["backend.models.*"]

# Security filters
#play.filters.headers.contentSecurityPolicy = "default-src 'self'; connect-src 'self'; form-action 'none'; img-src 'self' data: blob:; font-src 'self' about: data:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';  frame-ancestors 'none'; "

play.filters.csp.directives.default-src = "'self'"
play.filters.csp.directives.connect-src = "'self'"
play.filters.csp.directives.form-action = "'none'"
play.filters.csp.directives.img-src = "'self' data: blob:"
play.filters.csp.directives.font-src = "'self' about: data:"
play.filters.csp.directives.script-src = "'self' 'unsafe-inline' 'unsafe-eval'"
play.filters.csp.directives.style-src = "'self' 'unsafe-inline'"
play.filters.csp.directives.frame-ancestors = "'none'"

play.filters.csrf.header.name = "X-XSRF-TOKEN"
play.filters.csrf.cookie.name = "XSRF-TOKEN"
play.filters.csrf.cookie.secure = true
play.filters.csrf.header.protectHeaders = null
#play.filters.https.strictTransportSecurity="max-age=31536000; includeSubDomains"

# Akka HTTP Server
# Maximum allowed HTTP headers per request. The default is 64 and that is too low for transmitting all the
# HAKA-attributes via shibboleth
akka.http.parsing.max-header-count = 128

# EXAM version
exam.release.version = "5.3.0"
