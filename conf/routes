GET           /                                                      controllers.Index.index

############### Session interface ############
GET           /checkSession                                          controllers.SessionController.checkSession
PUT           /extendSession                                         controllers.SessionController.extendSession
POST          /login                                                 controllers.SessionController.login
POST          /logout                                                controllers.SessionController.logout
GET           /attributes                                            controllers.SessionController.getAttributes

############### User interface ###############
GET           /users/:id                                             controllers.UserController.getUser(id: Long)
GET           /users/byrole/:role                                    controllers.UserController.getUsersByRole(role: String)
GET           /users/filter/:role                                    controllers.UserController.getUsersByRoleFilter(role: String, q: String)
GET           /users/filter/:role/:eid                               controllers.UserController.getExamInspectorsByRoleFilter(role: String, eid: Long, q: String)
GET           /users/filter/owner/:role/:eid                         controllers.UserController.getExamOwnersByRoleFilter(role: String, eid: Long, q: String)
PUT           /users/agreement/:id                                   controllers.UserController.updateUserAgreementAccepted(id: Long)
PUT           /user/lang                                             controllers.UserController.updateLanguage
GET           /users                                                 controllers.UserController.findUsers(filter: play.libs.F.Option[String])
POST          /users/:id/roles/:rname                                controllers.UserController.addRole(id: Long, rname: String)
DELETE        /users/:id/roles/:rname                                controllers.UserController.removeRole(id: Long, rname: String)
PUT           /users/:id/roles/:rname                                controllers.SessionController.setLoginRole(id: Long, rname: String)
GET           /students/:eid                                         controllers.UserController.getUnenrolledStudents(eid: Long, q: String)

############### Exam interface ###############
GET           /exams                                                 controllers.ExamController.getExams
GET           /exams/:id                                             controllers.ExamController.getExam(id: Long)
GET           /exampreview/:id                                       controllers.ExamController.getExamPreview(id: Long)
DELETE        /exams/:id                                             controllers.ExamController.deleteExam(id: Long)
PUT           /review/:id                                            controllers.ExamController.reviewExam(id: Long)
POST          /review/:eid/comment/:cid                              controllers.ExamController.insertComment(eid: Long, cid: Long)
PUT           /review/:eid/comment/:cid                              controllers.ExamController.updateComment(eid: Long, cid: Long)
GET           /reviews/:eid                                          controllers.ExamController.getExamReviews(eid: Long, statuses: java.util.List[String])
GET           /noshows/:eid                                          controllers.ExamController.listNoShows(eid: Long)
PUT           /reviews/archive                                       controllers.ExamController.archiveExams
GET           /review/info/:eid                                      controllers.ExamController.getExamStudentInfo(eid: Long)
PUT           /exams/:id                                             controllers.ExamController.updateExam(id: Long)
POST          /exams/:id                                             controllers.ExamController.copyExam(id: Long)
POST          /exams/:id/section                                     controllers.ExamController.insertSection(id: Long)
DELETE        /exams/:eid/section/:sid                               controllers.ExamController.removeSection(eid: Long, sid: Long)
PUT           /exams/:eid/section/:sid                               controllers.ExamController.updateSection(eid: Long, sid: Long)
PUT           /exams/:eid/course/:cid                                controllers.ExamController.updateCourse(eid: Long, cid: Long)
DELETE        /exams/:eid/course/:cid                                controllers.ExamController.removeCourse(eid: Long, cid: Long)
GET           /exams/:eid/reservation                                controllers.ExamController.getReservationInformationForExam(eid: Long)
GET           /finishedexams                                         controllers.ExamController.getFinishedExams
GET           /reviewerexams                                         controllers.ExamController.getTeachersExams
GET           /reviewerexams/:eid                                    controllers.ExamController.getExamReview(eid: Long)

GET           /examenrolments/:eid                                   controllers.ExamController.getEnrolmentsForExam(eid: Long)
GET           /examparticipations/:eid                               controllers.ExamController.getParticipationsForExam(eid: Long)
GET           /examparticipations/:eid/:uid                          controllers.ExamController.getParticipationsForExamAndUser(eid: Long, uid: Long)

POST          /exam/record                                           controllers.ExamRecordController.addExamRecord
GET           /exam/record                                           controllers.ExamRecordController.exportExamRecordsAsCsv(startDate: Long, endDate: Long)
GET           /exam/record/export/:id                                controllers.ExamRecordController.exportSelectedExamRecordsAsCsv(id: Long)

GET           /examsearch                                            controllers.ExamController.listExams(courseIds: play.libs.F.Option[LongList], sectionIds: play.libs.F.Option[LongList], tagIds: play.libs.F.Option[LongList])

GET           /examenrolmentroom/:eid                                controllers.ExamController.getRoomInfoFromEnrollment(eid: Long)

GET           /exam/:id/inspections                                  controllers.ExamController.getExamInspections(id: Long)
POST          /exams/:eid/inspector/:uid                             controllers.ExamController.insertInspection(eid: Long, uid: Long)
DELETE        /exams/inspector/:id                                   controllers.ExamController.deleteInspection(id: Long)

GET           /exam/:id/owners                                       controllers.ExamController.getExamOwners(id: Long)
PUT           /exam/:eid/owner/:uid                                  controllers.ExamController.insertExamOwner(eid: Long, uid: Long)
DELETE        /exam/:eid/owner/:uid                                  controllers.ExamController.removeExamOwner(eid: Long, uid: Long)

PUT           /exams/inspection/:id/:ready                           controllers.ExamController.updateInspection(id: Long, ready: Boolean)
POST          /exams/localInspection/:eid/:uid                       controllers.ExamController.insertLocalInspectionWithoutCommentAndEmail(eid: Long, uid: Long)
POST          /email/inspection/:eid                                 controllers.ExamController.sendInspectionMessage(eid: Long)

POST          /exams/:eid/section/:sid/:seq/question/:qid            controllers.ExamController.insertQuestion(eid: Long, sid: Long, seq: Int, qid: Long)
POST          /exams/:eid/section/:sid/:seq/questions                controllers.ExamController.insertMultipleQuestions(eid: Long, sid: Long, seq: Int, questions: String)
DELETE        /exams/:eid/section/:sid/question/:qid                 controllers.ExamController.removeQuestion(eid: Long, sid: Long, qid: Long)
PUT           /exams/:eid/section/:sid/:from/:to                     controllers.ExamController.reorderQuestion(eid: Long, sid: Long, from: Int, to: Int)
GET           /draft                                                 controllers.ExamController.createExamDraft(executionType: String)

PUT           /exam/:eid/software                                    controllers.ExamController.updateExamSoftwareInfo(eid: Long)

PUT           /exam/:eid/language/:code                              controllers.ExamController.addExamLanguage(eid: Long, code: String)
DELETE        /exam/:eid/languages                                   controllers.ExamController.resetExamLanguages(eid: Long)

GET           /exam/:eid/attachments                                 controllers.ExamController.getArchivedAttachments(eid: Long, start: play.libs.F.Option[String], end: play.libs.F.Option[String])

GET           /examtypes                                             controllers.ExamController.getExamTypes
GET           /gradescales                                           controllers.ExamController.getExamGradeScales

GET           /student/exams                                         controllers.StudentExamController.listAvailableExams(filter: play.libs.F.Option[String])
GET           /student/inspectors/exam/:id                           controllers.StudentExamController.getExamInspectors(id: Long)
GET           /student/finishedexams/:uid                            controllers.StudentExamController.getFinishedExams(uid: Long)
GET           /feedback/exams/:eid                                   controllers.StudentExamController.getExamGeneralInfo(eid: Long)
PUT           /student/exams/:id                                     controllers.StudentExamController.saveAnswersAndExit(id: Long)
PUT           /student/exam/abort/:id                                controllers.StudentExamController.abortExam(id: Long)
GET           /student/doexam/:hash                                  controllers.StudentExamController.startExam(hash: String)
GET           /enrolments                                            controllers.StudentExamController.getEnrolmentsForUser
GET           /enrolments/:eid                                       controllers.StudentExamController.getEnrolment(eid: Long)
PUT           /enrolments/:eid                                       controllers.EnrollController.updateEnrolment(eid: Long)
GET           /student/exams/:eid                                    controllers.StudentExamController.getReservationInstructions(eid: Long)

POST          /student/exams/:hash/question/:qid/option/:oids        controllers.StudentExamController.answerMultiChoice(hash: String, qid: Long, oids: String)
POST          /student/exams/:hash/question/:questionId              controllers.StudentExamController.answerEssay(hash: String, questionId: Long)


############### Enrolment interface ###############

GET           /enroll/:code                                          controllers.EnrollController.enrollExamList(code: String)
GET           /enroll/reservation/:id                                controllers.EnrollController.enrolmentsByReservation(id: Long)
GET           /enroll/:code/exam/:id                                 controllers.EnrollController.enrollExamInfo(code: String, id: Long)
POST          /enroll/:code/exam/:id                                 controllers.EnrollController.createEnrolment(code: String, id: Long)
GET           /enroll/exam/:id                                       controllers.EnrollController.checkIfEnrolled(id: Long)
POST          /enroll/student/:eid/:uid                              controllers.EnrollController.createStudentEnrolment(eid: Long, uid: Long)
DELETE        /enroll/:id                                            controllers.EnrollController.removeEnrolment(id: Long)
DELETE        /enroll/student/:id                                    controllers.EnrollController.removeStudentEnrolment(id: Long)
############### Section interface ###############

GET           /sections/:id                                          controllers.ExamController.getExamSections(id: Long)
DELETE        /section/:sectionId                                    controllers.ExamController.deleteSection(sectionId: Long)
DELETE        /clearsection/:sid                                     controllers.ExamController.clearQuestions(sid: Long)


############### Courses interface ###############
GET           /courses                                               controllers.CourseController.getCourses(filter: Option[String], q: Option[String])
GET           /courses/user/:id                                      controllers.CourseController.listUsersCourses(id: Long, examIds: Option[IdList], sectionIds: Option[IdList], tagIds: Option[IdList])
GET           /courses/:id                                           controllers.CourseController.getCourse(id: Long)
POST          /courses/insert/:code                                  controllers.CourseInfoController.insertCourseFromInterface(code: String)

############### Question interface ###############

GET           /questions                                             controllers.QuestionController.getQuestions(exam: java.util.List[java.lang.Long], course: java.util.List[java.lang.Long], tag: java.util.List[java.lang.Long], section: java.util.List[java.lang.Long])
GET           /questions/:id                                         controllers.QuestionController.getQuestion(id: Long)

PUT           /questions/:id                                         controllers.QuestionController.updateQuestion(id: Long)
PUT           /questions/:id/score                                   controllers.QuestionController.scoreQuestion(id: Long)

PUT           /questions/option/:oid                                 controllers.QuestionController.updateOption(oid: Long)
PUT           /questions/correctoption/:oid                          controllers.QuestionController.toggleCorrectOption(oid: Long)
POST          /questions                                             controllers.QuestionController.addQuestion
POST          /question/:id                                          controllers.QuestionController.copyQuestion(id: Long)
POST          /questions/:qid/option                                 controllers.QuestionController.addOption(qid: Long)
DELETE        /questions/:id                                         controllers.QuestionController.deleteQuestion(id: Long)
DELETE        /questions/option/:oid                                 controllers.QuestionController.deleteOption(oid: Long)
PUT           /questions/owner/:uid                                  controllers.QuestionController.updateQuestionOwner(uid: Long)


GET           /options                                               controllers.QuestionController.createOption
GET           /options/:id                                           controllers.QuestionController.getOption(id: Long)
GET           /question/:id/metadata                                 controllers.MetaDataController.getQuestionMetaData(id: Long)

############### Reservation interface ###############

GET           /rooms                                                 controllers.RoomController.getExamRooms
GET           /rooms/:id                                             controllers.RoomController.getExamRoom(id: Long)
PUT           /rooms/:id                                             controllers.RoomController.updateExamRoom(id: Long)
DELETE        /rooms/:id                                             controllers.RoomController.inactivateExamRoom(id: Long)
POST          /rooms/:id                                             controllers.RoomController.activateExamRoom(id: Long)

PUT           /address/:id                                           controllers.RoomController.updateExamRoomAddress(id: Long)

PUT           /workinghours/:id                                      controllers.RoomController.updateExamRoomWorkingHours(id: Long)
PUT           /startinghours/:id                                     controllers.RoomController.updateExamStartingHours(id: Long)
PUT           /exception/:id                                         controllers.RoomController.addRoomExceptionHour(id: Long)
DELETE        /exception/:id                                         controllers.RoomController.removeRoomExceptionHour(id: Long)

POST          /room/:id/accessibility                                controllers.RoomController.updateExamRoomAccessibility(id: Long)

DELETE        /accessibility/:id                                     controllers.AccessibilityController.removeAccessibility(id: Long)
POST          /accessibility                                         controllers.AccessibilityController.addAccessibility
PUT           /accessibility                                         controllers.AccessibilityController.updateAccessibility
GET           /accessibility                                         controllers.AccessibilityController.getAccessibilities

GET           /draft/rooms                                           controllers.RoomController.createExamRoomDraft

GET           /reservations/students                                 controllers.ReservationController.getStudents
GET           /reservations/teachers                                 controllers.ReservationController.getTeachers
GET           /reservations/examrooms                                controllers.ReservationController.getExamRooms
GET           /reservations/exams                                    controllers.ReservationController.getExams
GET           /reservations                                          controllers.ReservationController.getReservations(state: play.libs.F.Option[java.lang.String], ownerId: play.libs.F.Option[java.lang.Long], studentId: play.libs.F.Option[java.lang.Long], roomId: play.libs.F.Option[java.lang.Long], machineId: play.libs.F.Option[java.lang.Long], examId: play.libs.F.Option[java.lang.Long], start: play.libs.F.Option[java.lang.Long], end: play.libs.F.Option[java.lang.Long])
DELETE        /reservations/:id                                      controllers.ReservationController.removeReservation(id: Long)
PUT           /reservations/:id                                      controllers.ReservationController.permitRetrial(id: Long)

############### ExamMachines interface ###############

GET           /machines                                              controllers.ExamMachineController.getExamMachines
GET           /machines/:id                                          controllers.ExamMachineController.getExamMachine(id: Long)
GET           /machines/:id/reservations                             controllers.ExamMachineController.getExamMachineReservationsFromNow(id: Long)
PUT           /machines/:id                                          controllers.ExamMachineController.updateExamMachine(id: Long)
POST          /machines/:id                                          controllers.ExamMachineController.insertExamMachine(id: Long)
DELETE        /machines/:id                                          controllers.ExamMachineController.removeExamMachine(id: Long)

PUT           /machine/:mid/software/:sid                            controllers.ExamMachineController.updateExamMachineSoftwareInfo(mid: Long, sid: Long)
POST          /machine/:mid/software/:sid                            controllers.ExamMachineController.toggleExamMachineSoftwareInfo(mid: Long, sid: Long)
PUT           /software_machine/:mid                                 controllers.ExamMachineController.resetExamMachineSoftwareInfo(mid: Long)

GET           /softwares                                             controllers.ExamMachineController.getSoftwares
GET           /softwares/:id                                         controllers.ExamMachineController.getSoftware(id: Long)
DELETE        /softwares/:id                                         controllers.ExamMachineController.removeSoftware(id: Long)
POST          /softwares/add/:name                                   controllers.ExamMachineController.addSoftware(name: String)
PUT           /softwares/update/:id/:name                            controllers.ExamMachineController.updateSoftware(id: Long, name: String)

############## Attachment ############################
POST          /attachment/question                                   controllers.AttachmentController.addAttachmentToQuestion
DELETE        /attachment/question/:id                               controllers.AttachmentController.deleteQuestionAttachment(id: Long)
GET           /attachment/question/:id                               controllers.AttachmentController.downloadQuestionAttachment(id: Long)
POST          /attachment/question/answer                            controllers.AttachmentController.addAttachmentToQuestionAnswer
DELETE        /attachment/question/:qid/answer/:hash                 controllers.AttachmentController.deleteQuestionAnswerAttachment(qid: Long, hash: String)
GET           /attachment/question/:qid/answer/:hash                 controllers.AttachmentController.downloadQuestionAnswerAttachment(qid: Long, hash: String)
POST          /attachment/exam                                       controllers.AttachmentController.addAttachmentToExam
DELETE        /attachment/exam/:id                                   controllers.AttachmentController.deleteExamAttachment(id: Long)
GET           /attachment/exam/:id                                   controllers.AttachmentController.downloadExamAttachment(id: Long)

POST          /attachment/exam/:id/feedback                          controllers.AttachmentController.addFeedbackAttachment(id: Long)
DELETE        /attachment/exam/:id/feedback                          controllers.AttachmentController.deleteFeedbackAttachment(id: Long)
GET           /attachment/exam/:id/feedback                          controllers.AttachmentController.downloadFeedbackAttachment(id: Long)


#### integration ####
GET           /integration/record/:startDate                         controllers.Interfaces.getNewRecords(startDate: String)
GET           /integration/recordalphabetic/:startDate               controllers.Interfaces.getNewRecordsAlphabeticKeyOrder(startDate: String)

################# Time interface ######################
GET           /time                                                  controllers.TimeController.getTime
GET           /time/:id                                              controllers.TimeController.getExamRemainingTime(id: Long)

################# Calendar interface ##################
GET           /calendar/:examId/:roomId                              controllers.CalendarController.getSlots(examId: Long, roomId: Long, day: String ?= "", aids: java.util.List[Integer])
POST          /calendar/reservation                                  controllers.CalendarController.createReservation
DELETE        /calendar/reservation/:id                              controllers.CalendarController.removeReservation(id: Long)

################# Language interface ##################
GET           /languages                                             controllers.LanguageController.getSupportedLanguages

################# Language interface ##################
GET           /tags                                                  controllers.TagController.listTags(filter: play.libs.F.Option[String], examIds: play.libs.F.Option[LongList], courseIds: play.libs.F.Option[LongList], sectionIds: play.libs.F.Option[LongList])
POST          /tags                                                  controllers.TagController.createTag
DELETE        /tags/:tid                                             controllers.TagController.deleteTag(tid: Long)
PUT           /tags/:tid/:qid                                        controllers.TagController.tagQuestion(tid: Long, qid: Long)
DELETE        /tags/:tid/:qid                                        controllers.TagController.untagQuestion(tid: Long, qid: Long)

################# General Settings interface ##################

GET           /agreement                                             controllers.SettingsController.getUserAgreement
PUT           /agreement                                             controllers.SettingsController.updateUserAgreement
PUT           /settings                                              controllers.SettingsController.updateSettings
GET           /settings/hostname                                     controllers.SettingsController.getHostname
GET           /settings/durations                                    controllers.SettingsController.getExamDurations
GET           /settings/gradescale                                   controllers.SettingsController.isExamGradeScaleOverridable
GET           /settings/enrolmentPermissionCheck                     controllers.SettingsController.isEnrolmentPermissionCheckActive
GET           /settings/environment                                  controllers.SettingsController.isProd
GET           /settings/maxfilesize                                  controllers.SettingsController.getMaxFilesize

################# Statistics interface ##################

GET           /statistics/resbydate/:roomId/:from/:to                controllers.StatisticsController.getReservationsForRoomByDate(roomId: Long, from: String, to: String)
GET           /statistics/allexams/:from/:to                         controllers.StatisticsController.reportAllExams(from: String, to: String)
GET           /statistics/reviewsbydate/:from/:to                    controllers.StatisticsController.getReviewsByDate(from: String, to: String)
GET           /statistics/teacherexamsbydate/:uid/:from/:to          controllers.StatisticsController.getTeacherExamsByDate(uid: Long, from: String, to: String)
GET           /statistics/examnames                                  controllers.StatisticsController.getExamNames
GET           /statistics/examnames/:id/:reportType                  controllers.StatisticsController.getExam(id: Long, reportType: String)
GET           /statistics/examenrollments/:id                        controllers.StatisticsController.getExamEnrollments(id: Long)
GET           /statistics/student/:id/:from/:to                      controllers.StatisticsController.reportStudentActivity(id: Long, from: String, to: String)

################# Reports interface ##################

GET           /reports/participations                                controllers.ReportController.getExamParticipations(dept: play.libs.F.Option[String], start: play.libs.F.Option[java.lang.Long], end: play.libs.F.Option[java.lang.Long])
GET           /reports/departments                                   controllers.ReportController.listDepartments
GET           /reports/exams                                         controllers.ReportController.getPublishedExams(dept: play.libs.F.Option[String], start: play.libs.F.Option[java.lang.Long], end: play.libs.F.Option[java.lang.Long])
GET           /reports/reservations                                  controllers.ReportController.getReservations(dept: play.libs.F.Option[String], start: play.libs.F.Option[java.lang.Long], end: play.libs.F.Option[java.lang.Long])
GET           /reports/responses                                     controllers.ReportController.getResponses(dept: play.libs.F.Option[String], start: play.libs.F.Option[java.lang.Long], end: play.libs.F.Option[java.lang.Long])

#######################################################
GET           /assets/*file                                          controllers.Assets.at(path="/public", file)
