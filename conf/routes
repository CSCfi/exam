GET           /                                                        controllers.assets.FrontendController.index()

############### Session interface ############
GET           /app/session                                             controllers.SessionController.checkSession(request: Request)
PUT           /app/session                                             controllers.SessionController.extendSession(request: Request)
POST          /app/session                                             controllers.SessionController.login(request: Request)
DELETE        /app/session                                             controllers.SessionController.logout(request: Request)

############### User interface ###############
GET           /app/users/byrole/:role                                  controllers.UserController.getUsersByRole(role: String)
GET           /app/users/filter/:role/:eid                             controllers.UserController.getExamInspectorsByRoleFilter(role: String, eid: Long, q: String)
GET           /app/users/question/owners/:role                         controllers.UserController.getQuestionOwnersByRoleFilter(role: String, q: String, qid: java.util.Optional[java.lang.Long], request: Request)
PUT           /app/users/agreement                                     controllers.UserController.updateUserAgreementAccepted(request: Request)
PUT           /app/user/lang                                           controllers.UserController.updateLanguage(request: Request)
GET           /app/users                                               controllers.UserController.findUsers(filter: java.util.Optional[String])
POST          /app/users/:id/roles/:rname                              controllers.UserController.addRole(id: Long, rname: String)
DELETE        /app/users/:id/roles/:rname                              controllers.UserController.removeRole(id: Long, rname: String)
PUT           /app/users/roles/:rname                                  controllers.SessionController.setLoginRole(rname: String, request: Request)
GET           /app/students/:eid                                       controllers.UserController.getUnenrolledStudents(eid: Long, q: String)
GET           /app/permissions                                         controllers.UserController.listPermissions
POST          /app/permissions                                         controllers.UserController.grantUserPermission(request: Request)
DELETE        /app/permissions                                         controllers.UserController.revokeUserPermission(request: Request)

############### Exam interface ###############
GET           /app/exams                                               controllers.ExamController.getExams(filter: java.util.Optional[String], request: Request)
POST          /app/exams                                               controllers.ExamController.createExamDraft(request: Request)
GET           /app/exams/:id                                           controllers.ExamController.getExam(id: Long, request: Request)
DELETE        /app/exams/:id                                           controllers.ExamController.deleteExam(id: Long, request: Request)
PUT           /app/exams/:id                                           controllers.ExamController.updateExam(id: Long, request: Request)
POST          /app/exams/:id                                           controllers.ExamController.copyExam(id: Long, request: Request)
PUT           /app/exams/:eid/course/:cid                              controllers.ExamController.updateCourse(eid: Long, cid: Long, request: Request)

GET           /app/exams/:id/preview                                   controllers.ExamController.getExamPreview(id: Long, request: Request)
GET           /app/reviewerexams                                       controllers.ExamController.getTeachersExams(request: Request)

GET           /app/examsearch                                          controllers.ExamController.listExams(courseIds: java.util.Optional[LongList], sectionIds: java.util.Optional[LongList], tagIds: java.util.Optional[LongList], owner: java.util.Optional[LongList], request: Request)

PUT           /app/exam/:eid/software/:sid                             controllers.ExamController.updateExamSoftware(eid: Long, sid: Long, request: Request)

PUT           /app/exams/:eid/language/:code                           controllers.ExamController.updateExamLanguage(eid: Long, code: String, request: Request)

GET           /app/examtypes                                           controllers.ExamController.getExamTypes
GET           /app/executiontypes                                      controllers.ExamController.getExamExecutionTypes
GET           /app/gradescales                                         controllers.ExamController.getExamGradeScales

############### Exam owner interface ###############
GET           /app/exam/:id/owners                                     controllers.ExamOwnerController.getExamOwners(id: Long)
POST          /app/exam/:eid/owner/:uid                                controllers.ExamOwnerController.insertExamOwner(eid: Long, uid: Long, request: Request)
DELETE        /app/exam/:eid/owner/:uid                                controllers.ExamOwnerController.removeExamOwner(eid: Long, uid: Long, request: Request)


############### Exam inspection interface ###############
GET           /app/exam/:id/inspections                                controllers.ExamInspectionController.getExamInspections(id: Long)
POST          /app/exams/:eid/inspector/:uid                           controllers.ExamInspectionController.addInspection(eid: Long, uid: Long, request: Request)
DELETE        /app/exams/inspector/:id                                 controllers.ExamInspectionController.deleteInspection(id: Long)
PUT           /app/exams/inspection/:id                                controllers.ExamInspectionController.setInspectionOutcome(id: Long, request: Request)

############### Printout exam interface ###############
POST          /app/exam/:id/examinationdate                            controllers.ExaminationEventController.insertExaminationDate(id: Long, request: Request)
DELETE        /app/exam/:id/examinationdate/:edid                      controllers.ExaminationEventController.removeExaminationDate(id: Long, edid: Long)
GET           /app/exam/printouts                                      controllers.ExamController.listPrintouts

############### Examination events interface ############
POST          /app/exam/:eid/examinationevents                          controllers.ExaminationEventController.insertExaminationEvent(eid: Long, request: Request)
PUT           /app/exam/:eid/examinationevents/:eecid                   controllers.ExaminationEventController.updateExaminationEvent(eid: Long, eecid: Long, request: Request)
DELETE        /app/exam/:eid/examinationevents/:eecid                   controllers.ExaminationEventController.removeExaminationEvent(eid: Long, eecid: Long)
GET           /app/examinationevents                                    controllers.ExaminationEventController.listExaminationEvents(start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/examinationevents/conflicting                        controllers.ExaminationEventController.listOverlappingExaminationEvents(start: String, duration: Int)

############### Question review interface ###############
GET           /app/exam/:id/questions                                  controllers.QuestionReviewController.getEssays(id: Long, ids: java.util.Optional[LongList], request: Request)

############### Exam record interface ###############
POST          /app/exam/record                                         controllers.ExamRecordController.addExamRecord(request: Request)
POST          /app/exam/register                                       controllers.ExamRecordController.registerExamWithoutRecord(request: Request)
GET           /app/exam/record                                         controllers.ExamRecordController.exportExamRecordsAsCsv(startDate: Long, endDate: Long)
POST          /app/exam/record/export/:id                              controllers.ExamRecordController.exportSelectedExamRecordsAsCsv(id: Long, request: Request)
POST          /app/exam/record/export/report/:id                       controllers.ExamRecordController.exportSelectedExamRecordsAsExcel(id: Long, request: Request)


############### Student exam execution interface ###############
POST          /app/student/exam/:hash                                  controllers.ExaminationController.initializeExam(hash: String, request: Request)
GET           /app/student/exam/:hash                                  controllers.ExaminationController.startExam(hash: String, request: Request)
PUT           /app/student/exam/:hash                                  controllers.ExaminationController.turnExam(hash: String, request: Request)
PUT           /app/student/exam/abort/:hash                            controllers.ExaminationController.abortExam(hash: String, request: Request)

POST          /app/student/exam/:hash/question/:qid/option             controllers.ExaminationController.answerMultiChoice(hash: String, qid: Long, request: Request)
POST          /app/student/exam/:hash/question/:questionId             controllers.ExaminationController.answerEssay(hash: String, questionId: Long, request: Request)
POST          /app/student/exam/:hash/clozetest/:questionId            controllers.ExaminationController.answerClozeTest(hash: String, questionId: Long, request: Request)

############### External student exam execution interface ###############
GET           /app/iop/student/exam/:hash                              controllers.iop.transfer.impl.ExternalExaminationController.startExam(hash: String, request: Request)
PUT           /app/iop/student/exam/:hash                              controllers.iop.transfer.impl.ExternalExaminationController.turnExam(hash: String, request: Request)
PUT           /app/iop/student/exam/abort/:hash                        controllers.iop.transfer.impl.ExternalExaminationController.abortExam(hash: String, request: Request)

POST          /app/iop/student/exam/:hash/question/:qid/option         controllers.iop.transfer.impl.ExternalExaminationController.answerMultiChoice(hash: String, qid: Long, request: Request)
POST          /app/iop/student/exam/:hash/question/:questionId         controllers.iop.transfer.impl.ExternalExaminationController.answerEssay(hash: String, questionId: Long, request: Request)
POST          /app/iop/student/exam/:hash/clozetest/:questionId        controllers.iop.transfer.impl.ExternalExaminationController.answerClozeTest(hash: String, questionId: Long, request: Request)

############### Student acions interface #########
GET           /app/feedback/exams/:eid                                 controllers.StudentActionsController.getExamFeedback(eid: Long, request: Request)
GET           /app/feedback/exams/:eid/score                           controllers.StudentActionsController.getExamScore(eid: Long, request: Request)
GET           /app/feedback/exams/:eid/answers                         controllers.ExamAnswerController.getAnswers(eid: Long, request: Request)
GET           /app/feedback/exams/:eid/report                          controllers.StudentActionsController.getExamScoreReport(eid: Long, request: Request)
GET           /app/student/finishedexams                               controllers.StudentActionsController.getFinishedExams(filter: java.util.Optional[String], request: Request)
GET           /app/student/enrolments                                  controllers.StudentActionsController.getEnrolmentsForUser(request: Request)
GET           /app/student/exam/:eid/info                              controllers.StudentActionsController.getExamInfo(eid: Long, request: Request)
GET           /app/student/exams                                       controllers.StudentActionsController.listAvailableExams(filter: java.util.Optional[String], request: Request)
GET           /app/student/enrolments/:eid                             controllers.StudentActionsController.getEnrolment(eid: Long, request: Request)
GET           /app/student/enrolments/:eid/configFile                  controllers.StudentActionsController.getExamConfigFile(eid: Long, request: Request)
PUT           /app/enrolments/:id/retrial                              controllers.EnrolmentController.permitRetrial(id: Long)

############### Section interface ###############

POST          /app/exams/:eid/sections                                 controllers.ExamSectionController.insertSection(eid: Long, request: Request)
DELETE        /app/exams/:eid/sections/:sid                            controllers.ExamSectionController.removeSection(eid: Long, sid: Long, request: Request)
PUT           /app/exams/:eid/sections/:sid                            controllers.ExamSectionController.updateSection(eid: Long, sid: Long, request: Request)
DELETE        /app/exams/:eid/sections/:sid/questions                  controllers.ExamSectionController.clearQuestions(eid: Long, sid: Long, request: Request)
POST          /app/exams/:eid/sections/:sid/questions/:qid             controllers.ExamSectionController.insertQuestion(eid: Long, sid: Long, qid: Long, request: Request)
POST          /app/exams/:eid/sections/:sid/questions                  controllers.ExamSectionController.insertMultipleQuestions(eid: Long, sid: Long, request: Request)
DELETE        /app/exams/:eid/sections/:sid/questions/:qid             controllers.ExamSectionController.removeQuestion(eid: Long, sid: Long, qid: Long, request: Request)
PUT           /app/exams/:eid/sections/:sid/reorder                    controllers.ExamSectionController.reorderSectionQuestions(eid: Long, sid: Long, request: Request)
PUT           /app/exams/:eid/reorder                                  controllers.ExamSectionController.reorderSections(eid: Long, request: Request)
GET           /app/exams/question/:id/distribution                     controllers.ExamSectionController.getQuestionDistribution(id: Long)
GET           /app/sections                                            controllers.ExamSectionController.listSections(filter: java.util.Optional[String], courseIds: java.util.Optional[LongList], examIds: java.util.Optional[LongList], tagIds: java.util.Optional[LongList], ownerIds: java.util.Optional[LongList], request: Request)

############### Section material interface ###############
GET           /app/materials                                           controllers.ExamMaterialController.listMaterials(request: Request)
POST          /app/materials                                           controllers.ExamMaterialController.createMaterial(request: Request)
PUT           /app/materials/:id                                       controllers.ExamMaterialController.updateMaterial(id: Long, request: Request)
DELETE        /app/materials/:id                                       controllers.ExamMaterialController.removeMaterial(id: Long, request: Request)
POST          /app/materials/:id/:sid                                  controllers.ExamMaterialController.addMaterialForSection(sid: Long, id: Long, request: Request)
DELETE        /app/materials/:id/:sid                                  controllers.ExamMaterialController.removeMaterialFromSection(sid: Long, id: Long, request: Request)

############### Section question interface ##########

PUT           /app/exams/:eid/sections/:sid/questions/:qid             controllers.ExamSectionController.updateUndistributedExamQuestion(eid: Long, sid: Long, qid: Long, request: Request)
PUT           /app/exams/:eid/sections/:sid/questions/:qid/distributed controllers.ExamSectionController.updateDistributedExamQuestion(eid: Long, sid: Long, qid: Long, request: Request)

############### Review interface ###############
GET           /app/reviews/:id                                         controllers.ReviewController.getExamReviews(id: Long, request: Request)
PUT           /app/review/:id                                          controllers.ReviewController.reviewExam(id: Long, request: Request)
PUT           /app/review/:id/info                                     controllers.ReviewController.updateAssessmentInfo(id: Long, request: Request)
PUT           /app/review/examquestion/:id/score                       controllers.ReviewController.scoreExamQuestion(id: Long, request: Request)
PUT           /app/review/examquestion/:id/score/force                 controllers.ReviewController.forceScoreExamQuestion(id: Long, request: Request)
PUT           /app/review/:eid/comment                                 controllers.ReviewController.updateComment(eid: Long, request: Request)
PUT           /app/review/:eid/comment/:cid/feedbackstatus             controllers.ReviewController.setCommentStatusRead(eid: Long, cid: Long, request: Request)
GET           /app/noshows/:eid                                        controllers.ReviewController.listNoShows(eid: Long, request: Request)
PUT           /app/reviews/archive                                     controllers.ReviewController.archiveExams(request: Request)
GET           /app/review/:eid                                         controllers.ReviewController.getExamReview(eid: Long, request: Request)
GET           /app/review/:id/locked                                   controllers.ReviewController.hasLockedAssessments(id: Long)
GET           /app/examparticipations/:eid                             controllers.ReviewController.getParticipationsForExamAndUser(eid: Long, request: Request)
GET           /app/usernoshows/:eid                                    controllers.ReviewController.listNoShowsForExamAndUser(eid: Long, request: Request)
POST          /app/email/inspection/:eid                               controllers.ReviewController.sendInspectionMessage(eid: Long, request: Request)
POST          /app/review/:id/inspection                               controllers.ReviewController.addInspectionComment(id: Long, request: Request)
POST          /app/gradeimport                                         controllers.ReviewDocumentsController.importGrades
GET           /app/exam/:eid/attachments                               controllers.ReviewDocumentsController.getArchivedAttachments(eid: Long, start: Option[String], end: Option[String])

############### Language inspection interface ###############
GET           /app/inspections                                         controllers.LanguageInspectionController.listInspections(month: java.util.Optional[String], start: java.util.Optional[java.lang.Long], end: java.util.Optional[java.lang.Long])
POST          /app/inspection                                          controllers.LanguageInspectionController.createInspection(request: Request)
PUT           /app/inspection/:id                                      controllers.LanguageInspectionController.assignInspection(id: Long, request: Request)
PUT           /app/inspection/:id/approval                             controllers.LanguageInspectionController.setApproval(id: Long, request: Request)
PUT           /app/inspection/:id/statement                            controllers.LanguageInspectionController.setStatement(id: Long, request: Request)

############### Enrolment interface ###############

GET           /app/enrolments                                          controllers.EnrolmentController.listEnrolledExams(code: String)
GET           /app/enrolments/reservation/:id                          controllers.EnrolmentController.enrolmentsByReservation(id: Long)
GET           /app/enrolments/:id                                      controllers.EnrolmentController.getEnrolledExamInfo(code: String, id: Long)
POST          /app/enrolments/:id                                      controllers.EnrolmentController.createEnrolment(id: Long, request: Request)
GET           /app/enrolments/exam/:id                                 controllers.EnrolmentController.checkIfEnrolled(id: Long, request: Request)
POST          /app/enrolments/student/:eid                             controllers.EnrolmentController.createStudentEnrolment(eid: Long, request: Request)
DELETE        /app/enrolments/:id                                      controllers.EnrolmentController.removeEnrolment(id: Long, request: Request)
DELETE        /app/enrolments/student/:id                              controllers.EnrolmentController.removeStudentEnrolment(id: Long, request: Request)
PUT           /app/enrolments/:eid                                     controllers.EnrolmentController.updateEnrolment(eid: Long, request: Request)
GET           /app/enrolments/room/:hash                               controllers.EnrolmentController.getRoomInfoFromEnrolment(hash: String, request: Request)
POST          /app/enrolments/:eid/examination/:cid                    controllers.EnrolmentController.addExaminationEventConfig(eid: Long, cid: Long, request: Request)
DELETE        /app/enrolments/:eid/examination                         controllers.EnrolmentController.removeExaminationEventConfig(eid: Long, request: Request)
DELETE        /app/enrolments/configs/:eecid                           controllers.EnrolmentController.removeExaminationEvent(eecid: Long)


############### Courses interface ###############
GET           /app/courses                                             controllers.CourseController.getCourses(filter: Option[String], q: Option[String])
GET           /app/courses/user                                        controllers.CourseController.listUsersCourses(examIds: Option[List[Long]], sectionIds: Option[List[Long]], tagIds: Option[List[Long]], ownerIds: Option[List[Long]])
GET           /app/courses/:id                                         controllers.CourseController.getCourse(id: Long)

############### Question interface ###############

GET           /app/questions                                           controllers.QuestionController.getQuestions(exam: java.util.List[java.lang.Long], course: java.util.List[java.lang.Long], tag: java.util.List[java.lang.Long], section: java.util.List[java.lang.Long], owner: java.util.List[java.lang.Long], request: Request)
GET           /app/questions/:id                                       controllers.QuestionController.getQuestion(id: Long, request: Request)
PUT           /app/questions/:id                                       controllers.QuestionController.updateQuestion(id: Long, request: Request)

POST          /app/questions                                           controllers.QuestionController.createQuestion(request: Request)
POST          /app/question/:id                                        controllers.QuestionController.copyQuestion(id: Long, request: Request)
DELETE        /app/questions/:id                                       controllers.QuestionController.deleteQuestion(id: Long, request: Request)
POST          /app/questions/owner/:uid                                controllers.QuestionController.addOwner(uid: Long, request: Request)
POST          /app/questions/export                                    controllers.QuestionController.exportQuestions(request: Request)
POST          /app/questions/import                                    controllers.QuestionController.importQuestions(request: Request)
GET           /app/questions/:id/preview/exam                          controllers.QuestionController.getExamSectionQuestionPreview(id: Long, request: Request)
GET           /app/questions/:id/preview/library                       controllers.QuestionController.getQuestionPreview(id: Long, request: Request)

############### Reservation interface ###############

GET           /app/rooms                                               controllers.RoomController.getExamRooms(request: Request)
GET           /app/rooms/:id                                           controllers.RoomController.getExamRoom(id: Long)
PUT           /app/rooms/:id                                           controllers.RoomController.updateExamRoom(id: Long, request: Request)
DELETE        /app/rooms/:id                                           controllers.RoomController.inactivateExamRoom(id: Long)
POST          /app/rooms/:id                                           controllers.RoomController.activateExamRoom(id: Long)

PUT           /app/address/:id                                         controllers.RoomController.updateExamRoomAddress(id: Long, request: Request)

POST          /app/workinghours                                        controllers.RoomController.updateExamRoomWorkingHours(request: Request)
DELETE        /app/workinghours/:rid/:id                               controllers.RoomController.removeExamRoomWorkingHours(rid: Long, id: Long)
PUT           /app/startinghours                                       controllers.RoomController.updateExamStartingHours(request: Request)
PUT           /app/exception                                           controllers.RoomController.addRoomExceptionHours(request: Request)
DELETE        /app/rooms/:roomId/exception/:exceptionId                controllers.RoomController.removeRoomExceptionHour(roomId: Long, exceptionId: Long)

POST          /app/room/:id/accessibility                              controllers.RoomController.updateExamRoomAccessibility(id: Long, request: Request)

DELETE        /app/accessibility/:id                                   controllers.AccessibilityController.removeAccessibility(id: Long)
POST          /app/accessibility                                       controllers.AccessibilityController.addAccessibility(request: Request)
PUT           /app/accessibility                                       controllers.AccessibilityController.updateAccessibility(request: Request)
GET           /app/accessibility                                       controllers.AccessibilityController.getAccessibilities

GET           /app/draft/rooms                                         controllers.RoomController.createExamRoomDraft

GET           /app/reservations/students                               controllers.ReservationController.getStudents(filter: java.util.Optional[String])
GET           /app/reservations/teachers                               controllers.ReservationController.getTeachers(filter: java.util.Optional[String])
GET           /app/reservations/examrooms                              controllers.ReservationController.getExamRooms
GET           /app/reservations/exams                                  controllers.ReservationController.getExams(request: Request, filter: java.util.Optional[String])
GET           /app/reservations                                        controllers.ReservationController.getReservations(state: java.util.Optional[String], ownerId: java.util.Optional[java.lang.Long], studentId: java.util.Optional[java.lang.Long], roomId: java.util.Optional[java.lang.Long], machineId: java.util.Optional[java.lang.Long], examId: java.util.Optional[java.lang.Long], start: java.util.Optional[String], end: java.util.Optional[String], externalRef: java.util.Optional[String], request: Request)
GET           /app/events                                              controllers.ReservationController.getExaminationEvents(state: java.util.Optional[String], ownerId: java.util.Optional[java.lang.Long], studentId: java.util.Optional[java.lang.Long], examId: java.util.Optional[java.lang.Long], start: java.util.Optional[String], end: java.util.Optional[String], request: Request)
DELETE        /app/reservations/:id                                    controllers.ReservationController.removeReservation(id: Long, request: Request)
GET           /app/reservations/:id/machines                           controllers.ReservationController.findAvailableMachines(id: Long)
PUT           /app/reservations/:id/machine                            controllers.ReservationController.updateMachine(id: Long, request: Request)

############### ExamMachines interface ###############

GET           /app/machines                                            controllers.ExamMachineController.getExamMachines
GET           /app/machines/:id                                        controllers.ExamMachineController.getExamMachine(id: Long)
GET           /app/machines/:id/reservations                           controllers.ExamMachineController.getExamMachineReservationsFromNow(id: Long)
PUT           /app/machines/:id                                        controllers.ExamMachineController.updateExamMachine(id: Long, request: Request)
POST          /app/machines/:id                                        controllers.ExamMachineController.insertExamMachine(id: Long, request: Request)
DELETE        /app/machines/:id                                        controllers.ExamMachineController.removeExamMachine(id: Long)

POST          /app/machine/:mid/software/:sid                          controllers.ExamMachineController.updateMachineSoftware(mid: Long, sid: Long)
PUT           /app/software_machine/:mid                               controllers.ExamMachineController.resetMachineSoftware(mid: Long)

GET           /app/softwares                                           controllers.ExamMachineController.listSoftware
GET           /app/softwares/:id                                       controllers.ExamMachineController.getSoftware(id: Long)
DELETE        /app/softwares/:id                                       controllers.ExamMachineController.removeSoftware(id: Long)
POST          /app/softwares/:name                                     controllers.ExamMachineController.addSoftware(name: String, request: Request)
PUT           /app/softwares/:id/:name                                 controllers.ExamMachineController.updateSoftware(id: Long, name: String)

############## Attachment ############################
POST          /app/attachment/question                                 controllers.AttachmentController.addAttachmentToQuestion(request: Request)
DELETE        /app/attachment/question/:id                             controllers.AttachmentController.deleteQuestionAttachment(id: Long)
GET           /app/attachment/question/:id                             controllers.AttachmentController.downloadQuestionAttachment(id: Long, request: Request)
POST          /app/attachment/question/answer                          controllers.AttachmentController.addAttachmentToQuestionAnswer(request: Request)
DELETE        /app/attachment/question/:qid/answer                     controllers.AttachmentController.deleteQuestionAnswerAttachment(qid: Long, request: Request)
GET           /app/attachment/question/:qid/answer                     controllers.AttachmentController.downloadQuestionAnswerAttachment(qid: Long, request: Request)
POST          /app/attachment/exam                                     controllers.AttachmentController.addAttachmentToExam(request: Request)
DELETE        /app/attachment/exam/:id                                 controllers.AttachmentController.deleteExamAttachment(id: Long, request: Request)
GET           /app/attachment/exam/:id                                 controllers.AttachmentController.downloadExamAttachment(id: Long, request: Request)

POST          /app/attachment/exam/:id/feedback                        controllers.AttachmentController.addFeedbackAttachment(id: Long, request: Request)
DELETE        /app/attachment/exam/:id/feedback                        controllers.AttachmentController.deleteFeedbackAttachment(id: Long, request: Request)
GET           /app/attachment/exam/:id/feedback                        controllers.AttachmentController.downloadFeedbackAttachment(id: Long, request: Request)

POST          /app/attachment/exam/:id/statement                       controllers.AttachmentController.addStatementAttachment(id: Long, request: Request)
DELETE        /app/attachment/exam/:id/statement                       controllers.AttachmentController.deleteStatementAttachment(id: Long, request: Request)
GET           /app/attachment/exam/:id/statement                       controllers.AttachmentController.downloadStatementAttachment(id: Long, request: Request)

############### External Attachment ##################
GET           /app/iop/attachment/exam/:hash                           controllers.iop.transfer.impl.ExternalAttachmentController.downloadExamAttachment(hash: String, request: Request)
GET           /app/iop/attachment/exam/:hash/question/:qid             controllers.iop.transfer.impl.ExternalAttachmentController.downloadQuestionAttachment(hash: String, qid: Long, request: Request)
POST          /app/iop/attachment/question/answer                      controllers.iop.transfer.impl.ExternalAttachmentController.addAttachmentToQuestionAnswer(request: Request)
DELETE        /app/iop/attachment/question/:qid/answer/:hash           controllers.iop.transfer.impl.ExternalAttachmentController.deleteQuestionAnswerAttachment(qid: Long, hash: String, request: Request)
GET           /app/iop/attachment/question/:qid/answer/:hash           controllers.iop.transfer.impl.ExternalAttachmentController.downloadQuestionAnswerAttachment(qid: Long, hash: String, request: Request)

#### integration ####
# records
GET           /integration/record/:startDate                           controllers.integration.ExamRecordAPIController.getNewRecords(startDate: String)

# exams
GET           /integration/exams/active                                controllers.integration.ExamAPIController.getActiveExams(date: java.util.Optional[String])

# reservations
GET           /integration/reservations                                controllers.integration.ReservationAPIController.getReservations(start: java.util.Optional[String], end: java.util.Optional[String], roomId: java.util.Optional[java.lang.Long])
GET           /integration/rooms                                       controllers.integration.ReservationAPIController.getRooms
GET           /integration/rooms/:id/openinghours                      controllers.integration.ReservationAPIController.getRoomOpeningHours(id: Long, date: java.util.Optional[String])

# reports
GET           /integration/reports                                     controllers.integration.ReportAPIController.getExamEnrolments(start: java.util.Optional[String], end: java.util.Optional[String])

################# Transferred exam ######################
PUT           /app/iop/facilities/:id                                  controllers.iop.transfer.impl.FacilityController.updateFacility(id: Long)
GET           /app/iop/organisations                                   controllers.iop.transfer.impl.OrganisationController.listOrganisations
GET           /app/iop/facilities                                      controllers.iop.transfer.impl.FacilityController.listFacilities(org: java.util.Optional[String])
GET           /app/iop/calendar/:examId/:roomRef                       controllers.iop.transfer.impl.ExternalCalendarController.requestSlots(examId: Long, roomRef: String, org: java.util.Optional[String], date: java.util.Optional[String], request: Request)
POST          /app/iop/reservations/external                           controllers.iop.transfer.impl.ExternalCalendarController.requestReservation(request: Request)
DELETE        /app/iop/reservations/external/:ref                      controllers.iop.transfer.impl.ExternalCalendarController.requestReservationRemoval(ref: String, request: Request)
DELETE        /app/iop/reservations/external/:ref/force                controllers.iop.transfer.impl.ExternalCalendarController.requestReservationRevocation(ref: String, request: Request)

######## Collaborative Student Actions interface #######

GET           /app/iop/student/finishedExams                           controllers.iop.collaboration.impl.CollaborativeStudentActionController.getFinishedExams(request: Request)

################# Collaborative Exam interface #########
GET           /app/iop/exams                                           controllers.iop.collaboration.impl.CollaborativeExamController.searchExams(request: Request, filter: java.util.Optional[String])
POST          /app/iop/exams                                           controllers.iop.collaboration.impl.CollaborativeExamController.createExam(request: Request)
GET           /app/iop/exams/:id                                       controllers.iop.collaboration.impl.CollaborativeExamController.getExam(id: Long, request: Request)
GET           /app/iop/exams/:id/preview                               controllers.iop.collaboration.impl.CollaborativeExamController.getExamPreview(id: Long, request: Request)
PUT           /app/iop/exams/:id                                       controllers.iop.collaboration.impl.CollaborativeExamController.updateExam(id: Long, request: Request)
DELETE        /app/iop/exams/:id                                       controllers.iop.collaboration.impl.CollaborativeExamController.deleteExam(id: Long)
PUT           /app/iop/exams/:id/language/:code                        controllers.iop.collaboration.impl.CollaborativeExamController.updateLanguage(id: Long, code: String, request: Request)
POST          /app/iop/exams/:id/owners                                controllers.iop.collaboration.impl.CollaborativeExamController.addOwner(id: Long, request: Request)
DELETE        /app/iop/exams/:id/owners/:oid                           controllers.iop.collaboration.impl.CollaborativeExamController.removeOwner(id: Long, oid: Long, request: Request)
GET           /app/iop/gradescales                                     controllers.iop.collaboration.impl.CollaborativeExamController.listGradeScales

POST          /app/iop/exams/:eid/sections                             controllers.iop.collaboration.impl.CollaborativeExamSectionController.addSection(eid: Long, request: Request)
DELETE        /app/iop/exams/:eid/sections/:sid                        controllers.iop.collaboration.impl.CollaborativeExamSectionController.removeSection(eid: Long, sid: Long, request: Request)
PUT           /app/iop/exams/:eid/sections/:sid                        controllers.iop.collaboration.impl.CollaborativeExamSectionController.updateSection(eid: Long, sid: Long, request: Request)
DELETE        /app/iop/exams/:eid/sections/:sid/questions              controllers.iop.collaboration.impl.CollaborativeExamSectionController.clearQuestions(eid: Long, sid: Long, request: Request)
POST          /app/iop/exams/:eid/sections/:sid/questions              controllers.iop.collaboration.impl.CollaborativeExamSectionController.addQuestion(eid: Long, sid: Long, request: Request)
DELETE        /app/iop/exams/:eid/sections/:sid/questions/:qid         controllers.iop.collaboration.impl.CollaborativeExamSectionController.removeQuestion(eid: Long, sid: Long, qid: Long, request: Request)
PUT           /app/iop/exams/:eid/sections/:sid/reorder                controllers.iop.collaboration.impl.CollaborativeExamSectionController.reorderSectionQuestions(eid: Long, sid: Long, request: Request)
PUT           /app/iop/exams/:eid/reorder                              controllers.iop.collaboration.impl.CollaborativeExamSectionController.reorderSections(eid: Long, request: Request)
PUT           /app/iop/exams/:eid/sections/:sid/questions/:qid         controllers.iop.collaboration.impl.CollaborativeExamSectionController.updateQuestion(eid: Long, sid: Long, qid: Long, request: Request)
################# Collaborative Exam enrolment interface #########
GET           /app/iop/enrolment                                       controllers.iop.collaboration.impl.CollaborativeEnrolmentController.searchExams(filter: java.util.Optional[String])
GET           /app/iop/enrolments/exam/:eid                            controllers.iop.collaboration.impl.CollaborativeEnrolmentController.checkIfEnrolled(eid: Long, request: Request)
POST          /app/iop/enrolments/:eid                                 controllers.iop.collaboration.impl.CollaborativeEnrolmentController.createEnrolment(eid: Long, request: Request)
################# Collaborative Exam reservation interface #########
GET           /app/iop/exams/:eid/info                                 controllers.iop.collaboration.impl.CollaborativeCalendarController.getExamInfo(eid: Long)
GET           /app/iop/exams/:eid/calendar/:roomId                     controllers.iop.collaboration.impl.CollaborativeCalendarController.getSlots(eid: Long, roomId: Long, day: String ?= "", aids: java.util.Optional[IntList], request: Request)
POST          /app/iop/calendar/reservation                            controllers.iop.collaboration.impl.CollaborativeCalendarController.createReservation(request: Request)
################# Collaborative External Exam reservation interface #########
GET           /app/iop/exams/:eid/external/calendar/:roomId            controllers.iop.collaboration.impl.CollaborativeExternalCalendarController.requestSlots(eid: Long, roomId: String, org: java.util.Optional[String], date: java.util.Optional[String], request: Request)
POST          /app/iop/calendar/external/reservation                   controllers.iop.collaboration.impl.CollaborativeExternalCalendarController.requestReservation(request: Request)


################# Collaborative Exam review interface #########
GET           /app/iop/reviews/:id                                     controllers.iop.collaboration.impl.CollaborativeReviewController.listAssessments(id: Long, request: Request)
GET           /app/iop/reviews/:id/:ref                                controllers.iop.collaboration.impl.CollaborativeReviewController.getAssessment(id: Long, ref: String, request: Request)
PUT           /app/iop/reviews/:id/:ref/question/:qid                  controllers.iop.collaboration.impl.CollaborativeReviewController.updateAnswerScore(id: Long, ref: String, qid: Long, request: Request)
PUT           /app/iop/reviews/:id/:ref/question/:qid/force            controllers.iop.collaboration.impl.CollaborativeReviewController.forceUpdateAnswerScore(id: Long, ref: String, qid: Long, request: Request)
PUT           /app/iop/reviews/:id/:ref                                controllers.iop.collaboration.impl.CollaborativeReviewController.updateAssessment(id: Long, ref: String, request: Request)
PUT           /app/iop/reviews/:id/:ref/comment                        controllers.iop.collaboration.impl.CollaborativeReviewController.addComment(id: Long, ref: String, request: Request)
POST          /app/iop/reviews/:id/:ref/comment                        controllers.iop.collaboration.impl.CollaborativeReviewController.setFeedbackRead(id: String, ref: String, request: Request)
PUT           /app/iop/reviews/:id/:ref/info                           controllers.iop.collaboration.impl.CollaborativeReviewController.updateAssessmentInfo(id: Long, ref: String, request: Request)
PUT           /app/iop/reviews/:id/:ref/record                         controllers.iop.collaboration.impl.CollaborativeReviewController.finalizeAssessment(id: Long, ref: String, request: Request)
POST          /app/iop/reviews/:id                                     controllers.iop.collaboration.impl.CollaborativeReviewController.exportAssessments(id: Long, request: Request)
GET           /app/iop/reviews/:eid/participations/:aid                controllers.iop.collaboration.impl.CollaborativeReviewController.getParticipationsForExamAndUser(eid: Long, aid: String, request: Request)
POST          /app/iop/reviews/:id/:ref/mail                           controllers.iop.collaboration.impl.CollaborativeReviewController.sendInspectionMessage(id: Long, ref: String, request: Request)

############# Integration attachments #################
GET           /app/iop/collab/attachment/:id                          controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadExternalAttachment(id: String)
POST          /app/iop/collab/attachment/question                     controllers.iop.collaboration.impl.CollaborativeAttachmentController.addAttachmentToQuestion(request: Request)
DELETE        /app/iop/collab/attachment/exam/:eid/question/:qid      controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteQuestionAttachment(eid: Long, qid: Long, request: Request)
GET           /app/iop/collab/attachment/exam/:eid/question/:qid      controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadQuestionAttachment(eid: Long, qid: Long, request: Request)
POST          /app/iop/collab/attachment/question/answer              controllers.iop.collaboration.impl.CollaborativeAttachmentController.addAttachmentToQuestionAnswer(request: Request)
DELETE        /app/iop/collab/attachment/question/:qid/answer/:eid    controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteQuestionAnswerAttachment(qid: Long, eid: Long, request: Request)
GET           /app/iop/collab/attachment/question/:qid/answer/:eid    controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadQuestionAnswerAttachment(qid: Long, eid: Long, request: Request)
POST          /app/iop/collab/attachment/exam                         controllers.iop.collaboration.impl.CollaborativeAttachmentController.addAttachmentToExam(request: Request)
DELETE        /app/iop/collab/attachment/exam/:id                     controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteExamAttachment(id: Long, request: Request)
GET           /app/iop/collab/attachment/exam/:id                     controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadExamAttachment(id: Long, request: Request)

POST          /app/iop/collab/attachment/exam/:id/:ref/feedback       controllers.iop.collaboration.impl.CollaborativeAttachmentController.addAssessmentAttachment(id: Long, ref: String, request: Request)
DELETE        /app/iop/collab/attachment/exam/:id/:ref/feedback       controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteAssessmentAttachment(id: Long, ref: String, request: Request)

POST          /app/iop/collab/attachment/exam/:id/statement           controllers.iop.collaboration.impl.CollaborativeAttachmentController.addStatementAttachment(id: Long, request: Request)
DELETE        /app/iop/collab/attachment/exam/:id/statement           controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteStatementAttachment(id: Long, request: Request)
GET           /app/iop/collab/attachment/exam/:id/statement           controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadStatementAttachment(id: Long, request: Request)

############# Integration data transfer #################
POST          /app/iop/export                                          controllers.iop.transfer.impl.DataTransferController.exportData(request: Request)

############# Integration m2m resources #################
GET           /integration/iop/slots                                   controllers.iop.transfer.impl.ExternalCalendarController.provideSlots(roomId: java.util.Optional[String], date: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String], duration: java.util.Optional[java.lang.Integer])
+ nocsrf
POST          /integration/iop/reservations                            controllers.iop.transfer.impl.ExternalCalendarController.provideReservation(request: Request)
+ nocsrf
DELETE        /integration/iop/reservations/:ref                       controllers.iop.transfer.impl.ExternalCalendarController.acknowledgeReservationRemoval(ref: String)
+ nocsrf
DELETE        /integration/iop/reservations/:ref/force                 controllers.iop.transfer.impl.ExternalCalendarController.acknowledgeReservationRevocation(ref: String)
GET           /integration/iop/reservations/:ref                       controllers.iop.transfer.impl.ExternalExamController.provideEnrolment(ref: String)
+ nocsrf
POST          /integration/iop/exams/:ref                              controllers.iop.transfer.impl.ExternalExamController.addExamForAssessment(ref: String, request: Request)
+ nocsrf
POST          /integration/iop/reservations/:ref/noshow                controllers.iop.transfer.impl.ExternalExamController.addNoShow(ref: String)
+ nocsrf
POST          /integration/iop/import                                  controllers.iop.transfer.impl.DataTransferController.importData(request: Request)
+ nocsrf
POST          /integration/iop/import/attachment/question/:id          controllers.iop.transfer.impl.DataTransferController.importQuestionAttachment(id: Long, request: Request)
GET           /integration/iop/reservations/:ref/instructions          controllers.SettingsController.provideMaturityInstructions(ref: String, lang: String)

################# Time interface ######################
GET           /app/time/:hash                                          controllers.TimeController.getRemainingExamTime(hash: String, request: Request)

################# Calendar interface ##################
GET           /app/calendar/:examId/:roomId                            controllers.CalendarController.getSlots(examId: Long, roomId: Long, day: String ?= "", aids: java.util.Optional[IntList], request: Request)
GET           /app/calendar/enrolment/:id/current                      controllers.CalendarController.getCurrentEnrolment(id: Long, request: Request)
POST          /app/calendar/reservation                                controllers.CalendarController.createReservation(request: Request)
DELETE        /app/calendar/reservation/:id                            controllers.CalendarController.removeReservation(id: Long, request: Request)
GET           /app/availability/:roomId/:date                          controllers.AvailabilityController.getAvailability(roomId: Long, date: String)

################# Language interface ##################
GET           /app/languages                                           controllers.LanguageController.getSupportedLanguages

################# Tag interface ##################
GET           /app/tags                                                controllers.TagController.listTags(filter: java.util.Optional[String], courseIds: java.util.Optional[LongList], examIds: java.util.Optional[LongList], sectionIds: java.util.Optional[LongList], owner: java.util.Optional[LongList], request: Request)
POST          /app/tags/questions                                      controllers.TagController.addTagToQuestions(request: Request)

################# General Settings interface ##################

GET           /app/config                                              controllers.SettingsController.getConfig
GET           /app/settings/agreement                                  controllers.SettingsController.getUserAgreement
PUT           /app/settings/agreement                                  controllers.SettingsController.updateUserAgreement(request: Request)
GET           /app/settings/byod                                       controllers.SettingsController.getByodSupport
GET           /app/settings/deadline                                   controllers.SettingsController.getDeadline
PUT           /app/settings/deadline                                   controllers.SettingsController.setDeadline(request: Request)
GET           /app/settings/reservationWindow                          controllers.SettingsController.getReservationWindowSize
PUT           /app/settings/reservationWindow                          controllers.SettingsController.setReservationWindowSize(request: Request)
GET           /app/settings/hostname                                   controllers.SettingsController.getHostname
GET           /app/settings/durations                                  controllers.SettingsController.getExamDurations
GET           /app/settings/maxDuration                                controllers.SettingsController.getExamMaxDuration
GET           /app/settings/minDuration                                controllers.SettingsController.getExamMinDuration
GET           /app/settings/gradescale                                 controllers.SettingsController.isExamGradeScaleOverridable
GET           /app/settings/enrolmentPermissionCheck                   controllers.SettingsController.isEnrolmentPermissionCheckActive
GET           /app/settings/environment                                controllers.SettingsController.isProd
GET           /app/settings/iop/examVisit                              controllers.SettingsController.isExamVisitSupported
GET           /app/settings/iop/examCollaboration                      controllers.SettingsController.isExamCollaborationSupported
GET           /app/settings/anonymousReviewEnabled                     controllers.SettingsController.isAnonymousReviewEnabled
GET           /app/settings/maxfilesize                                controllers.SettingsController.getMaxFilesize
GET           /app/settings/appVersion                                 controllers.SettingsController.getAppVersion
GET           /app/settings/maturityInstructions                       controllers.SettingsController.getMaturityInstructions(lang: String, ref: java.util.Optional[String])
GET           /app/settings/examinationQuitLink                        controllers.SettingsController.getExaminationQuitLink
GET           /app/settings/coursecodeprefix                           controllers.SettingsController.getCourseCodePrefix
GET           /app/settings/byodmaxparticipants                        controllers.SettingsController.getByodMaxParticipants


################# Statistics interface ##################

GET           /app/statistics/resbydate/:roomId/:from/:to              controllers.StatisticsController.getReservationsForRoomByDate(roomId: Long, from: String, to: String)
GET           /app/statistics/allexams/:from/:to                       controllers.StatisticsController.reportAllExams(from: String, to: String)
GET           /app/statistics/reviewsbydate/:from/:to                  controllers.StatisticsController.getReviewsByDate(from: String, to: String)
GET           /app/statistics/teacherexamsbydate/:uid/:from/:to        controllers.StatisticsController.getTeacherExamsByDate(uid: Long, from: String, to: String)
GET           /app/statistics/examnames                                controllers.StatisticsController.getExamNames
GET           /app/statistics/examnames/:id/:reportType                controllers.StatisticsController.getExam(id: Long, reportType: String)
GET           /app/statistics/examenrollments/:id                      controllers.StatisticsController.getExamEnrollments(id: Long)
GET           /app/statistics/student/:id/:from/:to                    controllers.StatisticsController.reportStudentActivity(id: Long, from: String, to: String)

################# Reports interface ##################

GET           /app/reports/participations                              controllers.ReportController.getExamParticipations(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/reports/departments                                 controllers.ReportController.listDepartments
GET           /app/reports/exams                                       controllers.ReportController.getPublishedExams(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/reports/reservations                                controllers.ReportController.getReservations(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/reports/responses                                   controllers.ReportController.getResponses(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
POST          /app/reports/questionreport/:id                          controllers.ReportController.exportExamQuestionScoresAsExcel(id: Long, request: Request)

################# Maintenance period interface ##################
GET           /app/maintenance                                         controllers.MaintenancePeriodController.listMaintenancePeriods
POST          /app/maintenance                                         controllers.MaintenancePeriodController.createMaintenancePeriod(request: Request)
PUT           /app/maintenance/:id                                     controllers.MaintenancePeriodController.updateMaintenancePeriod(id: Long, request: Request)
DELETE        /app/maintenance/:id                                     controllers.MaintenancePeriodController.removeMaintenancePeriod(id: Long)

#######################################################
GET           /attributes                                              controllers.SessionController.getAttributes(request: Request)

# static assets
GET           /*path                                                   controllers.assets.FrontendController.assetOrDefault(path)

