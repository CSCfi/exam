# SPDX-FileCopyrightText: 2024 The members of the EXAM Consortium
#
# SPDX-License-Identifier: EUPL-1.2

GET           /                                                               controllers.assets.FrontendController.index()

############### Session interface ############
GET           /app/session                                                    controllers.user.SessionController.checkSession(request: Request)
PUT           /app/session                                                    controllers.user.SessionController.extendSession(request: Request)
POST          /app/session                                                    controllers.user.SessionController.login(request: Request)
DELETE        /app/session                                                    controllers.user.SessionController.logout(request: Request)

############### User interface ###############
GET           /app/users/byrole/:role                                         controllers.user.UserController.listUsersByRole(role: String)
GET           /app/users/teachers                                             controllers.user.UserController.listTeachers(q: String)
GET           /app/users/question/owners/:role                                controllers.user.UserController.listQuestionOwners(role: String, q: String, qid: java.util.Optional[java.lang.Long], request: Request)
PUT           /app/users/agreement                                            controllers.user.UserController.updateUserAgreementAccepted(request: Request)
PUT           /app/user/lang                                                  controllers.user.UserController.updateLanguage(request: Request)
GET           /app/users                                                      controllers.user.UserController.listUsers(filter: java.util.Optional[String])
POST          /app/users/:id/roles/:rname                                     controllers.user.UserController.addRole(id: Long, rname: String)
DELETE        /app/users/:id/roles/:rname                                     controllers.user.UserController.removeRole(id: Long, rname: String)
PUT           /app/users/roles/:rname                                         controllers.user.SessionController.setLoginRole(rname: String, request: Request)
GET           /app/students/:eid                                              controllers.user.UserController.listUnenrolledStudents(eid: Long, q: String)
GET           /app/permissions                                                controllers.user.UserController.listPermissions
POST          /app/permissions                                                controllers.user.UserController.grantUserPermission(request: Request)
DELETE        /app/permissions                                                controllers.user.UserController.revokeUserPermission(request: Request)

############### Exam interface ###############
GET           /app/exams                                                      controllers.exam.ExamController.searchExams(filter: java.util.Optional[String], request: Request)
POST          /app/exams                                                      controllers.exam.ExamController.createExamDraft(request: Request)
GET           /app/exams/:id                                                  controllers.exam.ExamController.getExam(id: Long, request: Request)
DELETE        /app/exams/:id                                                  controllers.exam.ExamController.deleteExam(id: Long, request: Request)
PUT           /app/exams/:id                                                  controllers.exam.ExamController.updateExam(id: Long, request: Request)
POST          /app/exams/:id                                                  controllers.exam.ExamController.copyExam(id: Long, request: Request)
PUT           /app/exams/:eid/course/:cid                                     controllers.exam.ExamController.updateCourse(eid: Long, cid: Long, request: Request)

GET           /app/exams/:id/preview                                          controllers.exam.ExamController.getExamPreview(id: Long, request: Request)
GET           /app/reviewerexams                                              controllers.exam.ExamController.getTeachersExams(request: Request)

GET           /app/examsearch                                                 controllers.exam.ExamController.listExams(courseIds: java.util.Optional[LongList], sectionIds: java.util.Optional[LongList], tagIds: java.util.Optional[LongList], owner: java.util.Optional[LongList], request: Request)

PUT           /app/exam/:eid/software/:sid                                    controllers.exam.ExamController.updateExamSoftware(eid: Long, sid: Long, request: Request)

PUT           /app/exams/:eid/language/:code                                  controllers.exam.ExamController.updateExamLanguage(eid: Long, code: String, request: Request)

GET           /app/examtypes                                                  controllers.exam.ExamController.getExamTypes
GET           /app/executiontypes                                             controllers.exam.ExamController.getExamExecutionTypes
GET           /app/gradescales                                                controllers.exam.ExamController.getExamGradeScales

############### Exam owner interface ###############
GET           /app/exam/:id/owners                                            controllers.exam.ExamOwnerController.getExamOwners(id: Long)
POST          /app/exam/:eid/owner/:uid                                       controllers.exam.ExamOwnerController.insertExamOwner(eid: Long, uid: Long, request: Request)
DELETE        /app/exam/:eid/owner/:uid                                       controllers.exam.ExamOwnerController.removeExamOwner(eid: Long, uid: Long, request: Request)


############### Exam inspection interface ###############
GET           /app/exam/:id/inspections                                       controllers.assessment.ExamInspectionController.getExamInspections(id: Long)
POST          /app/exams/:eid/inspector/:uid                                  controllers.assessment.ExamInspectionController.addInspection(eid: Long, uid: Long, request: Request)
DELETE        /app/exams/inspector/:id                                        controllers.assessment.ExamInspectionController.deleteInspection(id: Long)
PUT           /app/exams/inspection/:id                                       controllers.assessment.ExamInspectionController.setInspectionOutcome(id: Long, request: Request)

############### Printout exam interface ###############
POST          /app/exam/:id/examinationdate                                   controllers.enrolment.ExaminationEventController.insertExaminationDate(id: Long, request: Request)
DELETE        /app/exam/:id/examinationdate/:edid                             controllers.enrolment.ExaminationEventController.removeExaminationDate(id: Long, edid: Long)
GET           /app/exam/printouts                                             controllers.exam.ExamController.listPrintouts

############### Examination events interface ############
POST          /app/exam/:eid/examinationevents                                controllers.enrolment.ExaminationEventController.insertExaminationEvent(eid: Long, request: Request)
PUT           /app/exam/:eid/examinationevents/:eecid                         controllers.enrolment.ExaminationEventController.updateExaminationEvent(eid: Long, eecid: Long, request: Request)
DELETE        /app/exam/:eid/examinationevents/:eecid                         controllers.enrolment.ExaminationEventController.removeExaminationEvent(eid: Long, eecid: Long)
GET           /app/examinationevents                                          controllers.enrolment.ExaminationEventController.listExaminationEvents(start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/examinationevents/conflicting                              controllers.enrolment.ExaminationEventController.listOverlappingExaminationEvents(start: String, duration: Int)

############### Question review interface ###############
GET           /app/exam/:id/questions                                         controllers.assessment.QuestionReviewController.getEssays(id: Long, ids: java.util.Optional[LongList], request: Request)

############### Exam record interface ###############
POST          /app/exam/record                                                controllers.assessment.ExamRecordController.addExamRecord(request: Request)
POST          /app/exam/register                                              controllers.assessment.ExamRecordController.registerExamWithoutRecord(request: Request)
GET           /app/exam/record                                                controllers.assessment.ExamRecordController.exportExamRecordsAsCsv(startDate: Long, endDate: Long)
POST          /app/exam/record/export/:id                                     controllers.assessment.ExamRecordController.exportSelectedExamRecordsAsCsv(id: Long, request: Request)
POST          /app/exam/record/export/report/:id                              controllers.assessment.ExamRecordController.exportSelectedExamRecordsAsExcel(id: Long, request: Request)


############### Student exam execution interface ###############
POST          /app/student/exam/:hash                                         controllers.examination.ExaminationController.initializeExam(hash: String, request: Request)
GET           /app/student/exam/:hash                                         controllers.examination.ExaminationController.startExam(hash: String, request: Request)
PUT           /app/student/exam/:hash                                         controllers.examination.ExaminationController.turnExam(hash: String, request: Request)
PUT           /app/student/exam/abort/:hash                                   controllers.examination.ExaminationController.abortExam(hash: String, request: Request)

POST          /app/student/exam/:hash/question/:qid/option                    controllers.examination.ExaminationController.answerMultiChoice(hash: String, qid: Long, request: Request)
POST          /app/student/exam/:hash/question/:questionId                    controllers.examination.ExaminationController.answerEssay(hash: String, questionId: Long, request: Request)
POST          /app/student/exam/:hash/clozetest/:questionId                   controllers.examination.ExaminationController.answerClozeTest(hash: String, questionId: Long, request: Request)

############### External student exam execution interface ###############
GET           /app/iop/student/exam/:hash                                     controllers.iop.transfer.impl.ExternalExaminationController.startExam(hash: String, request: Request)
PUT           /app/iop/student/exam/:hash                                     controllers.iop.transfer.impl.ExternalExaminationController.turnExam(hash: String, request: Request)
PUT           /app/iop/student/exam/abort/:hash                               controllers.iop.transfer.impl.ExternalExaminationController.abortExam(hash: String, request: Request)

POST          /app/iop/student/exam/:hash/question/:qid/option                controllers.iop.transfer.impl.ExternalExaminationController.answerMultiChoice(hash: String, qid: Long, request: Request)
POST          /app/iop/student/exam/:hash/question/:questionId                controllers.iop.transfer.impl.ExternalExaminationController.answerEssay(hash: String, questionId: Long, request: Request)
POST          /app/iop/student/exam/:hash/clozetest/:questionId               controllers.iop.transfer.impl.ExternalExaminationController.answerClozeTest(hash: String, questionId: Long, request: Request)

############### Student actions interface #########
GET           /app/feedback/exams/:eid                                        controllers.enrolment.StudentActionsController.getExamFeedback(eid: Long, request: Request)
GET           /app/feedback/exams/:eid/score                                  controllers.enrolment.StudentActionsController.getExamScore(eid: Long, request: Request)
GET           /app/feedback/exams/:eid/answers                                controllers.assessment.ExamAnswerController.getAnswers(eid: Long, request: Request)
GET           /app/feedback/exams/:eid/report                                 controllers.enrolment.StudentActionsController.getExamScoreReport(eid: Long, request: Request)
GET           /app/student/finishedexams                                      controllers.enrolment.StudentActionsController.getFinishedExams(filter: java.util.Optional[String], request: Request)
GET           /app/student/enrolments                                         controllers.enrolment.StudentActionsController.getEnrolmentsForUser(request: Request)
GET           /app/student/exam/:eid/info                                     controllers.enrolment.StudentActionsController.getExamInfo(eid: Long, request: Request)
GET           /app/student/exams                                              controllers.enrolment.StudentActionsController.listAvailableExams(filter: java.util.Optional[String], request: Request)
GET           /app/student/enrolments/:eid                                    controllers.enrolment.StudentActionsController.getEnrolment(eid: Long, request: Request)
GET           /app/student/enrolments/:eid/configFile                         controllers.enrolment.StudentActionsController.getExamConfigFile(eid: Long, request: Request)
PUT           /app/enrolments/:id/retrial                                     controllers.enrolment.EnrolmentController.permitRetrial(id: Long)

############### Section interface ###############

POST          /app/exams/:eid/sections                                        controllers.exam.ExamSectionController.insertSection(eid: Long, request: Request)
DELETE        /app/exams/:eid/sections/:sid                                   controllers.exam.ExamSectionController.removeSection(eid: Long, sid: Long, request: Request)
PUT           /app/exams/:eid/sections/:sid                                   controllers.exam.ExamSectionController.updateSection(eid: Long, sid: Long, request: Request)
DELETE        /app/exams/:eid/sections/:sid/questions                         controllers.exam.ExamSectionController.clearQuestions(eid: Long, sid: Long, request: Request)
POST          /app/exams/:eid/sections/:sid/questions/:qid                    controllers.exam.ExamSectionController.insertQuestion(eid: Long, sid: Long, qid: Long, request: Request)
POST          /app/exams/:eid/sections/:sid/questions                         controllers.exam.ExamSectionController.insertMultipleQuestions(eid: Long, sid: Long, request: Request)
DELETE        /app/exams/:eid/sections/:sid/questions/:qid                    controllers.exam.ExamSectionController.removeQuestion(eid: Long, sid: Long, qid: Long, request: Request)
PUT           /app/exams/:eid/sections/:sid/reorder                           controllers.exam.ExamSectionController.reorderSectionQuestions(eid: Long, sid: Long, request: Request)
PUT           /app/exams/:eid/reorder                                         controllers.exam.ExamSectionController.reorderSections(eid: Long, request: Request)
GET           /app/exams/question/:id/distribution                            controllers.exam.ExamSectionController.getQuestionDistribution(id: Long)
GET           /app/sections                                                   controllers.exam.ExamSectionController.listSections(filter: java.util.Optional[String], courseIds: java.util.Optional[LongList], examIds: java.util.Optional[LongList], tagIds: java.util.Optional[LongList], ownerIds: java.util.Optional[LongList], request: Request)

############### Section material interface ###############
GET           /app/materials                                                  controllers.question.ExamMaterialController.listMaterials(request: Request)
POST          /app/materials                                                  controllers.question.ExamMaterialController.createMaterial(request: Request)
PUT           /app/materials/:id                                              controllers.question.ExamMaterialController.updateMaterial(id: Long, request: Request)
DELETE        /app/materials/:id                                              controllers.question.ExamMaterialController.removeMaterial(id: Long, request: Request)
POST          /app/materials/:id/:sid                                         controllers.question.ExamMaterialController.addMaterialForSection(sid: Long, id: Long, request: Request)
DELETE        /app/materials/:id/:sid                                         controllers.question.ExamMaterialController.removeMaterialFromSection(sid: Long, id: Long, request: Request)

############### Section question interface ##########

PUT           /app/exams/:eid/sections/:sid/questions/:qid                    controllers.exam.ExamSectionController.updateUndistributedExamQuestion(eid: Long, sid: Long, qid: Long, request: Request)
PUT           /app/exams/:eid/sections/:sid/questions/:qid/distributed        controllers.exam.ExamSectionController.updateDistributedExamQuestion(eid: Long, sid: Long, qid: Long, request: Request)

############### Review interface ###############
GET           /app/reviews/:id                                                controllers.assessment.ReviewController.getExamReviews(id: Long, request: Request)
PUT           /app/review/:id                                                 controllers.assessment.ReviewController.reviewExam(id: Long, request: Request)
PUT           /app/review/:id/info                                            controllers.assessment.ReviewController.updateAssessmentInfo(id: Long, request: Request)
PUT           /app/review/examquestion/:id/score                              controllers.assessment.ReviewController.scoreExamQuestion(id: Long, request: Request)
PUT           /app/review/examquestion/:id/score/force                        controllers.assessment.ReviewController.forceScoreExamQuestion(id: Long, request: Request)
PUT           /app/review/:eid/comment                                        controllers.assessment.ReviewController.updateComment(eid: Long, request: Request)
PUT           /app/review/:eid/comment/:cid/feedbackstatus                    controllers.assessment.ReviewController.setCommentStatusRead(eid: Long, cid: Long, request: Request)
GET           /app/noshows/:eid                                               controllers.assessment.ReviewController.listNoShows(eid: Long, collaborative: java.util.Optional[java.lang.Boolean], request: Request)
PUT           /app/reviews/archive                                            controllers.assessment.ReviewController.archiveExams(request: Request)
GET           /app/review/:eid                                                controllers.assessment.ReviewController.getExamReview(eid: Long, request: Request)
GET           /app/review/:id/locked                                          controllers.assessment.ReviewController.hasLockedAssessments(id: Long)
GET           /app/examparticipations/:eid                                    controllers.assessment.ReviewController.getParticipationsForExamAndUser(eid: Long, request: Request)
GET           /app/usernoshows/:eid                                           controllers.assessment.ReviewController.listNoShowsForExamAndUser(eid: Long, request: Request)
POST          /app/email/inspection/:eid                                      controllers.assessment.ReviewController.sendInspectionMessage(eid: Long, request: Request)
POST          /app/review/:id/inspection                                      controllers.assessment.ReviewController.addInspectionComment(id: Long, request: Request)
POST          /app/gradeimport                                                controllers.assessment.ReviewDocumentsController.importGrades
GET           /app/exam/:eid/attachments                                      controllers.assessment.ReviewDocumentsController.getArchivedAttachments(eid: Long, start: Option[String], end: Option[String])

############### Language inspection interface ###############
GET           /app/inspections                                                controllers.assessment.LanguageInspectionController.listInspections(month: java.util.Optional[String], start: java.util.Optional[java.lang.Long], end: java.util.Optional[java.lang.Long])
POST          /app/inspection                                                 controllers.assessment.LanguageInspectionController.createInspection(request: Request)
PUT           /app/inspection/:id                                             controllers.assessment.LanguageInspectionController.assignInspection(id: Long, request: Request)
PUT           /app/inspection/:id/approval                                    controllers.assessment.LanguageInspectionController.setApproval(id: Long, request: Request)
PUT           /app/inspection/:id/statement                                   controllers.assessment.LanguageInspectionController.setStatement(id: Long, request: Request)

############### Enrolment interface ###############

GET           /app/enrolments                                                  controllers.enrolment.EnrolmentController.listEnrolledExams(code: String)
GET           /app/enrolments/reservation/:id                                  controllers.enrolment.EnrolmentController.enrolmentsByReservation(id: Long)
GET           /app/enrolments/:id                                              controllers.enrolment.EnrolmentController.getEnrolledExamInfo(code: String, id: Long)
POST          /app/enrolments/:id                                              controllers.enrolment.EnrolmentController.createEnrolment(id: Long, request: Request)
GET           /app/enrolments/exam/:id                                         controllers.enrolment.EnrolmentController.checkIfEnrolled(id: Long, request: Request)
POST          /app/enrolments/student/:eid                                     controllers.enrolment.EnrolmentController.createStudentEnrolment(eid: Long, request: Request)
DELETE        /app/enrolments/:id                                              controllers.enrolment.EnrolmentController.removeEnrolment(id: Long, request: Request)
DELETE        /app/enrolments/student/:id                                      controllers.enrolment.EnrolmentController.removeStudentEnrolment(id: Long, request: Request)
PUT           /app/enrolments/:eid                                             controllers.enrolment.EnrolmentController.updateEnrolment(eid: Long, request: Request)
GET           /app/enrolments/room/:hash                                       controllers.enrolment.EnrolmentController.getRoomInfoFromEnrolment(hash: String, request: Request)
POST          /app/enrolments/:eid/examination/:cid                            controllers.enrolment.EnrolmentController.addExaminationEventConfig(eid: Long, cid: Long, request: Request)
DELETE        /app/enrolments/:eid/examination                                 controllers.enrolment.EnrolmentController.removeExaminationEventConfig(eid: Long, request: Request)
DELETE        /app/enrolments/configs/:eecid                                   controllers.enrolment.EnrolmentController.removeExaminationEvent(eecid: Long)


############### Courses interface ###############
GET           /app/courses                                                     controllers.exam.CourseController.getCourses(filter: Option[String], q: Option[String])
GET           /app/courses/user                                                controllers.exam.CourseController.listUsersCourses(examIds: Option[List[Long]], sectionIds: Option[List[Long]], tagIds: Option[List[Long]], ownerIds: Option[List[Long]])
GET           /app/courses/:id                                                 controllers.exam.CourseController.getCourse(id: Long)

############### Question interface ###############

GET           /app/questions                                                   controllers.question.QuestionController.getQuestions(exam: java.util.List[java.lang.Long], course: java.util.List[java.lang.Long], tag: java.util.List[java.lang.Long], section: java.util.List[java.lang.Long], owner: java.util.List[java.lang.Long], request: Request)
GET           /app/questions/:id                                               controllers.question.QuestionController.getQuestion(id: Long, request: Request)
PUT           /app/questions/:id                                               controllers.question.QuestionController.updateQuestion(id: Long, request: Request)

POST          /app/questions                                                   controllers.question.QuestionController.createQuestion(request: Request)
POST          /app/question/:id                                                controllers.question.QuestionController.copyQuestion(id: Long, request: Request)
DELETE        /app/questions/:id                                               controllers.question.QuestionController.deleteQuestion(id: Long, request: Request)
POST          /app/questions/owner/:uid                                        controllers.question.QuestionController.addOwner(uid: Long, request: Request)
POST          /app/questions/export                                            controllers.question.QuestionController.exportQuestions(request: Request)
POST          /app/questions/import                                            controllers.question.QuestionController.importQuestions(request: Request)
GET           /app/questions/:id/preview/exam                                  controllers.question.QuestionController.getExamSectionQuestionPreview(id: Long, request: Request)
GET           /app/questions/:id/preview/library                               controllers.question.QuestionController.getQuestionPreview(id: Long, request: Request)

############### Reservation interface ###############

GET           /app/rooms                                                       controllers.facility.RoomController.getExamRooms(request: Request)
GET           /app/rooms/:id                                                   controllers.facility.RoomController.getExamRoom(id: Long)
PUT           /app/rooms/:id                                                   controllers.facility.RoomController.updateExamRoom(id: Long, request: Request)
DELETE        /app/rooms/:id                                                   controllers.facility.RoomController.inactivateExamRoom(id: Long)
POST          /app/rooms/:id                                                   controllers.facility.RoomController.activateExamRoom(id: Long)

PUT           /app/address/:id                                                 controllers.facility.RoomController.updateExamRoomAddress(id: Long, request: Request)

POST          /app/workinghours                                                controllers.facility.RoomController.updateExamRoomWorkingHours(request: Request)
DELETE        /app/workinghours/:rid/:id                                       controllers.facility.RoomController.removeExamRoomWorkingHours(rid: Long, id: Long)
PUT           /app/startinghours                                               controllers.facility.RoomController.updateExamStartingHours(request: Request)
PUT           /app/exception                                                   controllers.facility.RoomController.addRoomExceptionHours(request: Request)
DELETE        /app/rooms/:roomId/exception/:exceptionId                        controllers.facility.RoomController.removeRoomExceptionHour(roomId: Long, exceptionId: Long)

POST          /app/room/:id/accessibility                                      controllers.facility.RoomController.updateExamRoomAccessibility(id: Long, request: Request)

DELETE        /app/accessibility/:id                                           controllers.facility.AccessibilityController.removeAccessibility(id: Long)
POST          /app/accessibility                                               controllers.facility.AccessibilityController.addAccessibility(request: Request)
PUT           /app/accessibility                                               controllers.facility.AccessibilityController.updateAccessibility(request: Request)
GET           /app/accessibility                                               controllers.facility.AccessibilityController.getAccessibilities

GET           /app/draft/rooms                                                 controllers.facility.RoomController.createExamRoomDraft

GET           /app/reservations/students                                       controllers.enrolment.ReservationController.getStudents(filter: java.util.Optional[String])
GET           /app/reservations/teachers                                       controllers.enrolment.ReservationController.getTeachers(filter: java.util.Optional[String])
GET           /app/reservations/examrooms                                      controllers.enrolment.ReservationController.getExamRooms
GET           /app/reservations/exams                                          controllers.enrolment.ReservationController.getExams(request: Request, filter: java.util.Optional[String])
GET           /app/reservations                                                controllers.enrolment.ReservationController.getReservations(state: java.util.Optional[String], ownerId: java.util.Optional[java.lang.Long], studentId: java.util.Optional[java.lang.Long], roomId: java.util.Optional[java.lang.Long], machineId: java.util.Optional[java.lang.Long], examId: java.util.Optional[java.lang.Long], start: java.util.Optional[String], end: java.util.Optional[String], externalRef: java.util.Optional[String], request: Request)
GET           /app/events                                                      controllers.enrolment.ReservationController.getExaminationEvents(state: java.util.Optional[String], ownerId: java.util.Optional[java.lang.Long], studentId: java.util.Optional[java.lang.Long], examId: java.util.Optional[java.lang.Long], start: java.util.Optional[String], end: java.util.Optional[String], request: Request)
DELETE        /app/reservations/:id                                            controllers.enrolment.ReservationController.removeReservation(id: Long, request: Request)
GET           /app/reservations/:reservationId/:roomId/machines                controllers.enrolment.ReservationController.findAvailableMachines(reservationId: Long, roomId: Long)
PUT           /app/reservations/:id/machine                                    controllers.enrolment.ReservationController.updateMachine(id: Long, request: Request)

############### ExamMachines interface ###############

GET           /app/machines                                                    controllers.facility.ExamMachineController.getExamMachines
GET           /app/machines/:id                                                controllers.facility.ExamMachineController.getExamMachine(id: Long)
GET           /app/machines/:id/reservations                                   controllers.facility.ExamMachineController.getExamMachineReservationsFromNow(id: Long)
PUT           /app/machines/:id                                                controllers.facility.ExamMachineController.updateExamMachine(id: Long, request: Request)
POST          /app/machines/:id                                                controllers.facility.ExamMachineController.insertExamMachine(id: Long)
DELETE        /app/machines/:id                                                controllers.facility.ExamMachineController.removeExamMachine(id: Long)

POST          /app/machine/:mid/software/:sid                                  controllers.facility.ExamMachineController.updateMachineSoftware(mid: Long, sid: Long)
PUT           /app/software_machine/:mid                                       controllers.facility.ExamMachineController.resetMachineSoftware(mid: Long)

GET           /app/softwares                                                   controllers.facility.ExamMachineController.listSoftware
GET           /app/softwares/:id                                               controllers.facility.ExamMachineController.getSoftware(id: Long)
DELETE        /app/softwares/:id                                               controllers.facility.ExamMachineController.removeSoftware(id: Long)
POST          /app/softwares/:name                                             controllers.facility.ExamMachineController.addSoftware(name: String)
PUT           /app/softwares/:id/:name                                         controllers.facility.ExamMachineController.updateSoftware(id: Long, name: String)

############## Attachment ############################
POST          /app/attachment/question                                          controllers.attachment.AttachmentController.addAttachmentToQuestion(request: Request)
DELETE        /app/attachment/question/:id                                      controllers.attachment.AttachmentController.deleteQuestionAttachment(id: Long)
GET           /app/attachment/question/:id                                      controllers.attachment.AttachmentController.downloadQuestionAttachment(id: Long, request: Request)
POST          /app/attachment/question/answer                                   controllers.attachment.AttachmentController.addAttachmentToQuestionAnswer(request: Request)
DELETE        /app/attachment/question/:qid/answer                              controllers.attachment.AttachmentController.deleteQuestionAnswerAttachment(qid: Long, request: Request)
GET           /app/attachment/question/:qid/answer                              controllers.attachment.AttachmentController.downloadQuestionAnswerAttachment(qid: Long, request: Request)
POST          /app/attachment/exam                                              controllers.attachment.AttachmentController.addAttachmentToExam(request: Request)
DELETE        /app/attachment/exam/:id                                          controllers.attachment.AttachmentController.deleteExamAttachment(id: Long, request: Request)
GET           /app/attachment/exam/:id                                          controllers.attachment.AttachmentController.downloadExamAttachment(id: Long, request: Request)

POST          /app/attachment/exam/:id/feedback                                 controllers.attachment.AttachmentController.addFeedbackAttachment(id: Long, request: Request)
DELETE        /app/attachment/exam/:id/feedback                                 controllers.attachment.AttachmentController.deleteFeedbackAttachment(id: Long, request: Request)
GET           /app/attachment/exam/:id/feedback                                 controllers.attachment.AttachmentController.downloadFeedbackAttachment(id: Long, request: Request)

POST          /app/attachment/exam/:id/statement                                controllers.attachment.AttachmentController.addStatementAttachment(id: Long, request: Request)
DELETE        /app/attachment/exam/:id/statement                                controllers.attachment.AttachmentController.deleteStatementAttachment(id: Long, request: Request)
GET           /app/attachment/exam/:id/statement                                controllers.attachment.AttachmentController.downloadStatementAttachment(id: Long, request: Request)

############### External Attachment ##################
GET           /app/iop/attachment/exam/:hash                                    controllers.iop.transfer.impl.ExternalAttachmentController.downloadExamAttachment(hash: String, request: Request)
GET           /app/iop/attachment/exam/:hash/question/:qid                      controllers.iop.transfer.impl.ExternalAttachmentController.downloadQuestionAttachment(hash: String, qid: Long, request: Request)
POST          /app/iop/attachment/question/answer                               controllers.iop.transfer.impl.ExternalAttachmentController.addAttachmentToQuestionAnswer(request: Request)
DELETE        /app/iop/attachment/question/:qid/answer/:hash                    controllers.iop.transfer.impl.ExternalAttachmentController.deleteQuestionAnswerAttachment(qid: Long, hash: String, request: Request)
GET           /app/iop/attachment/question/:qid/answer/:hash                    controllers.iop.transfer.impl.ExternalAttachmentController.downloadQuestionAnswerAttachment(qid: Long, hash: String, request: Request)

#### integration ####
# records
GET           /integration/record/:startDate                                     controllers.integration.ExamRecordAPIController.getNewRecords(startDate: String)

# exams
GET           /integration/exams/active                                          controllers.integration.ExamAPIController.getActiveExams(date: java.util.Optional[String])

# reservations
GET           /integration/reservations                                          controllers.integration.ReservationAPIController.getReservations(start: java.util.Optional[String], end: java.util.Optional[String], roomId: java.util.Optional[java.lang.Long])
GET           /integration/rooms                                                 controllers.integration.ReservationAPIController.getRooms
GET           /integration/rooms/:id/openinghours                                controllers.integration.ReservationAPIController.getRoomOpeningHours(id: Long, date: java.util.Optional[String])

# reports
GET           /integration/reports                                               controllers.integration.ReportAPIController.getExamEnrolments(start: java.util.Optional[String], end: java.util.Optional[String])

################# Transferred exam ######################
PUT           /app/iop/facilities/:id                                            controllers.iop.transfer.impl.FacilityController.updateFacility(id: Long)
GET           /app/iop/organisations                                             controllers.iop.transfer.impl.OrganisationController.listOrganisations
GET           /app/iop/facilities                                                controllers.iop.transfer.impl.FacilityController.listFacilities(org: java.util.Optional[String])
GET           /app/iop/calendar/:examId/:roomRef                                 controllers.iop.transfer.impl.ExternalCalendarController.requestSlots(examId: Long, roomRef: String, org: java.util.Optional[String], date: java.util.Optional[String], request: Request)
POST          /app/iop/reservations/external                                     controllers.iop.transfer.impl.ExternalCalendarController.requestReservation(request: Request)
DELETE        /app/iop/reservations/external/:ref                                controllers.iop.transfer.impl.ExternalCalendarController.requestReservationRemoval(ref: String, request: Request)
DELETE        /app/iop/reservations/external/:ref/force                          controllers.iop.transfer.impl.ExternalCalendarController.requestReservationRevocation(ref: String, request: Request)

######## Collaborative Student Actions interface #######

GET           /app/iop/student/finishedExams                                     controllers.iop.collaboration.impl.CollaborativeStudentActionController.getFinishedExams(request: Request)

################# Collaborative Exam interface #########
GET           /app/iop/exams                                                     controllers.iop.collaboration.impl.CollaborativeExamController.searchExams(request: Request, filter: java.util.Optional[String])
POST          /app/iop/exams                                                     controllers.iop.collaboration.impl.CollaborativeExamController.createExam(request: Request)
GET           /app/iop/exams/:id                                                 controllers.iop.collaboration.impl.CollaborativeExamController.getExam(id: Long, request: Request)
GET           /app/iop/exams/:id/preview                                         controllers.iop.collaboration.impl.CollaborativeExamController.getExamPreview(id: Long, request: Request)
PUT           /app/iop/exams/:id                                                 controllers.iop.collaboration.impl.CollaborativeExamController.updateExam(id: Long, request: Request)
DELETE        /app/iop/exams/:id                                                 controllers.iop.collaboration.impl.CollaborativeExamController.deleteExam(id: Long)
PUT           /app/iop/exams/:id/language/:code                                  controllers.iop.collaboration.impl.CollaborativeExamController.updateLanguage(id: Long, code: String, request: Request)
POST          /app/iop/exams/:id/owners                                          controllers.iop.collaboration.impl.CollaborativeExamController.addOwner(id: Long, request: Request)
DELETE        /app/iop/exams/:id/owners/:oid                                     controllers.iop.collaboration.impl.CollaborativeExamController.removeOwner(id: Long, oid: Long, request: Request)
GET           /app/iop/gradescales                                               controllers.iop.collaboration.impl.CollaborativeExamController.listGradeScales

POST          /app/iop/exams/:eid/sections                                       controllers.iop.collaboration.impl.CollaborativeExamSectionController.addSection(eid: Long, request: Request)
DELETE        /app/iop/exams/:eid/sections/:sid                                  controllers.iop.collaboration.impl.CollaborativeExamSectionController.removeSection(eid: Long, sid: Long, request: Request)
PUT           /app/iop/exams/:eid/sections/:sid                                  controllers.iop.collaboration.impl.CollaborativeExamSectionController.updateSection(eid: Long, sid: Long, request: Request)
DELETE        /app/iop/exams/:eid/sections/:sid/questions                        controllers.iop.collaboration.impl.CollaborativeExamSectionController.clearQuestions(eid: Long, sid: Long, request: Request)
POST          /app/iop/exams/:eid/sections/:sid/questions                        controllers.iop.collaboration.impl.CollaborativeExamSectionController.addQuestion(eid: Long, sid: Long, request: Request)
DELETE        /app/iop/exams/:eid/sections/:sid/questions/:qid                   controllers.iop.collaboration.impl.CollaborativeExamSectionController.removeQuestion(eid: Long, sid: Long, qid: Long, request: Request)
PUT           /app/iop/exams/:eid/sections/:sid/reorder                          controllers.iop.collaboration.impl.CollaborativeExamSectionController.reorderSectionQuestions(eid: Long, sid: Long, request: Request)
PUT           /app/iop/exams/:eid/reorder                                        controllers.iop.collaboration.impl.CollaborativeExamSectionController.reorderSections(eid: Long, request: Request)
PUT           /app/iop/exams/:eid/sections/:sid/questions/:qid                   controllers.iop.collaboration.impl.CollaborativeExamSectionController.updateQuestion(eid: Long, sid: Long, qid: Long, request: Request)
################# Collaborative Exam enrolment interface #########
GET           /app/iop/enrolment                                                 controllers.iop.collaboration.impl.CollaborativeEnrolmentController.searchExams(filter: java.util.Optional[String])
GET           /app/iop/enrolments/exam/:eid                                      controllers.iop.collaboration.impl.CollaborativeEnrolmentController.checkIfEnrolled(eid: Long, request: Request)
POST          /app/iop/enrolments/:eid                                           controllers.iop.collaboration.impl.CollaborativeEnrolmentController.createEnrolment(eid: Long, request: Request)
################# Collaborative Exam reservation interface #########
GET           /app/iop/exams/:eid/info                                           controllers.iop.collaboration.impl.CollaborativeCalendarController.getExamInfo(eid: Long)
GET           /app/iop/exams/:eid/calendar/:roomId                               controllers.iop.collaboration.impl.CollaborativeCalendarController.getSlots(eid: Long, roomId: Long, day: String ?= "", aids: java.util.Optional[IntList], request: Request)
POST          /app/iop/calendar/reservation                                      controllers.iop.collaboration.impl.CollaborativeCalendarController.createReservation(request: Request)
################# Collaborative External Exam reservation interface #########
GET           /app/iop/exams/:eid/external/calendar/:roomId                      controllers.iop.collaboration.impl.CollaborativeExternalCalendarController.requestSlots(eid: Long, roomId: String, org: java.util.Optional[String], date: java.util.Optional[String], request: Request)
POST          /app/iop/calendar/external/reservation                             controllers.iop.collaboration.impl.CollaborativeExternalCalendarController.requestReservation(request: Request)


################# Collaborative Exam review interface #########
GET           /app/iop/reviews/:id                                               controllers.iop.collaboration.impl.CollaborativeReviewController.listAssessments(id: Long, request: Request)
GET           /app/iop/reviews/:id/:ref                                          controllers.iop.collaboration.impl.CollaborativeReviewController.getAssessment(id: Long, ref: String, request: Request)
PUT           /app/iop/reviews/:id/:ref/question/:qid                            controllers.iop.collaboration.impl.CollaborativeReviewController.updateAnswerScore(id: Long, ref: String, qid: Long, request: Request)
PUT           /app/iop/reviews/:id/:ref/question/:qid/force                      controllers.iop.collaboration.impl.CollaborativeReviewController.forceUpdateAnswerScore(id: Long, ref: String, qid: Long, request: Request)
PUT           /app/iop/reviews/:id/:ref                                          controllers.iop.collaboration.impl.CollaborativeReviewController.updateAssessment(id: Long, ref: String, request: Request)
PUT           /app/iop/reviews/:id/:ref/comment                                  controllers.iop.collaboration.impl.CollaborativeReviewController.addComment(id: Long, ref: String, request: Request)
POST          /app/iop/reviews/:id/:ref/comment                                  controllers.iop.collaboration.impl.CollaborativeReviewController.setFeedbackRead(id: String, ref: String, request: Request)
PUT           /app/iop/reviews/:id/:ref/info                                     controllers.iop.collaboration.impl.CollaborativeReviewController.updateAssessmentInfo(id: Long, ref: String, request: Request)
PUT           /app/iop/reviews/:id/:ref/record                                   controllers.iop.collaboration.impl.CollaborativeReviewController.finalizeAssessment(id: Long, ref: String, request: Request)
POST          /app/iop/reviews/:id                                               controllers.iop.collaboration.impl.CollaborativeReviewController.exportAssessments(id: Long, request: Request)
GET           /app/iop/reviews/:eid/participations/:aid                          controllers.iop.collaboration.impl.CollaborativeReviewController.getParticipationsForExamAndUser(eid: Long, aid: String, request: Request)
POST          /app/iop/reviews/:id/:ref/mail                                     controllers.iop.collaboration.impl.CollaborativeReviewController.sendInspectionMessage(id: Long, ref: String, request: Request)

############# Integration attachments #################
GET           /app/iop/collab/attachment/:id                                     controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadExternalAttachment(id: String)
POST          /app/iop/collab/attachment/question                                controllers.iop.collaboration.impl.CollaborativeAttachmentController.addAttachmentToQuestion(request: Request)
DELETE        /app/iop/collab/attachment/exam/:eid/question/:qid                 controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteQuestionAttachment(eid: Long, qid: Long, request: Request)
GET           /app/iop/collab/attachment/exam/:eid/question/:qid                 controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadQuestionAttachment(eid: Long, qid: Long, request: Request)
POST          /app/iop/collab/attachment/question/answer                         controllers.iop.collaboration.impl.CollaborativeAttachmentController.addAttachmentToQuestionAnswer(request: Request)
DELETE        /app/iop/collab/attachment/question/:qid/answer/:eid               controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteQuestionAnswerAttachment(qid: Long, eid: Long, request: Request)
GET           /app/iop/collab/attachment/question/:qid/answer/:eid               controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadQuestionAnswerAttachment(qid: Long, eid: Long, request: Request)
POST          /app/iop/collab/attachment/exam                                    controllers.iop.collaboration.impl.CollaborativeAttachmentController.addAttachmentToExam(request: Request)
DELETE        /app/iop/collab/attachment/exam/:id                                controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteExamAttachment(id: Long, request: Request)
GET           /app/iop/collab/attachment/exam/:id                                controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadExamAttachment(id: Long, request: Request)

POST          /app/iop/collab/attachment/exam/:id/:ref/feedback                  controllers.iop.collaboration.impl.CollaborativeAttachmentController.addAssessmentAttachment(id: Long, ref: String, request: Request)
DELETE        /app/iop/collab/attachment/exam/:id/:ref/feedback                  controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteAssessmentAttachment(id: Long, ref: String, request: Request)

POST          /app/iop/collab/attachment/exam/:id/statement                      controllers.iop.collaboration.impl.CollaborativeAttachmentController.addStatementAttachment(id: Long, request: Request)
DELETE        /app/iop/collab/attachment/exam/:id/statement                      controllers.iop.collaboration.impl.CollaborativeAttachmentController.deleteStatementAttachment(id: Long, request: Request)
GET           /app/iop/collab/attachment/exam/:id/statement                      controllers.iop.collaboration.impl.CollaborativeAttachmentController.downloadStatementAttachment(id: Long, request: Request)

############# Integration data transfer #################
POST          /app/iop/export                                                    controllers.iop.transfer.impl.DataTransferController.exportData(request: Request)

############# Integration m2m resources #################
GET           /integration/iop/slots                                             controllers.iop.transfer.impl.ExternalCalendarController.provideSlots(roomId: java.util.Optional[String], date: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String], duration: java.util.Optional[java.lang.Integer])
+ nocsrf
POST          /integration/iop/reservations                                      controllers.iop.transfer.impl.ExternalCalendarController.provideReservation(request: Request)
+ nocsrf
DELETE        /integration/iop/reservations/:ref                                 controllers.iop.transfer.impl.ExternalCalendarController.acknowledgeReservationRemoval(ref: String)
+ nocsrf
DELETE        /integration/iop/reservations/:ref/force                           controllers.iop.transfer.impl.ExternalCalendarController.acknowledgeReservationRevocation(ref: String)
GET           /integration/iop/reservations/:ref                                 controllers.iop.transfer.impl.ExternalExamController.provideEnrolment(ref: String)
+ nocsrf
POST          /integration/iop/exams/:ref                                        controllers.iop.transfer.impl.ExternalExamController.addExamForAssessment(ref: String, request: Request)
+ nocsrf
POST          /integration/iop/reservations/:ref/noshow                          controllers.iop.transfer.impl.ExternalExamController.addNoShow(ref: String)
+ nocsrf
POST          /integration/iop/import                                            controllers.iop.transfer.impl.DataTransferController.importData(request: Request)
+ nocsrf
POST          /integration/iop/import/attachment/question/:id                    controllers.iop.transfer.impl.DataTransferController.importQuestionAttachment(id: Long, request: Request)
GET           /integration/iop/reservations/:ref/instructions                    controllers.admin.SettingsController.provideMaturityInstructions(ref: String, lang: String)

################# Time interface ######################
GET           /app/time/:hash                                                    controllers.examination.TimeController.getRemainingExamTime(hash: String, request: Request)

################# Calendar interface ##################
GET           /app/calendar/:examId/:roomId                                      controllers.calendar.CalendarController.getSlots(examId: Long, roomId: Long, day: String ?= "", aids: java.util.Optional[IntList], request: Request)
GET           /app/calendar/enrolment/:id/current                                controllers.calendar.CalendarController.getCurrentEnrolment(id: Long, request: Request)
POST          /app/calendar/reservation                                          controllers.calendar.CalendarController.createReservation(request: Request)
DELETE        /app/calendar/reservation/:id                                      controllers.calendar.CalendarController.removeReservation(id: Long, request: Request)
GET           /app/availability/:roomId/:date                                    controllers.facility.AvailabilityController.getAvailability(roomId: Long, date: String)

################# Language interface ##################
GET           /app/languages                                                     controllers.user.LanguageController.getSupportedLanguages

################# Tag interface ##################
GET           /app/tags                                                          controllers.question.TagController.listTags(filter: java.util.Optional[String], courseIds: java.util.Optional[LongList], examIds: java.util.Optional[LongList], sectionIds: java.util.Optional[LongList], owner: java.util.Optional[LongList], request: Request)
POST          /app/tags/questions                                                controllers.question.TagController.addTagToQuestions(request: Request)

################# General Settings interface ##################

GET           /app/config                                                        controllers.admin.SettingsController.getConfig
GET           /app/settings/agreement                                            controllers.admin.SettingsController.getUserAgreement
PUT           /app/settings/agreement                                            controllers.admin.SettingsController.updateUserAgreement(request: Request)
GET           /app/settings/byod                                                 controllers.admin.SettingsController.getByodSupport
GET           /app/settings/deadline                                             controllers.admin.SettingsController.getDeadline
PUT           /app/settings/deadline                                             controllers.admin.SettingsController.setDeadline(request: Request)
GET           /app/settings/reservationWindow                                    controllers.admin.SettingsController.getReservationWindowSize
PUT           /app/settings/reservationWindow                                    controllers.admin.SettingsController.setReservationWindowSize(request: Request)
GET           /app/settings/hostname                                             controllers.admin.SettingsController.getHostname
GET           /app/settings/durations                                            controllers.admin.SettingsController.getExamDurations
GET           /app/settings/maxDuration                                          controllers.admin.SettingsController.getExamMaxDuration
GET           /app/settings/minDuration                                          controllers.admin.SettingsController.getExamMinDuration
GET           /app/settings/gradescale                                           controllers.admin.SettingsController.isExamGradeScaleOverridable
GET           /app/settings/enrolmentPermissionCheck                             controllers.admin.SettingsController.isEnrolmentPermissionCheckActive
GET           /app/settings/environment                                          controllers.admin.SettingsController.isProd
GET           /app/settings/iop/examVisit                                        controllers.admin.SettingsController.isExamVisitSupported
GET           /app/settings/iop/examCollaboration                                controllers.admin.SettingsController.isExamCollaborationSupported
GET           /app/settings/anonymousReviewEnabled                               controllers.admin.SettingsController.isAnonymousReviewEnabled
GET           /app/settings/maxfilesize                                          controllers.admin.SettingsController.getMaxFilesize
GET           /app/settings/appVersion                                           controllers.admin.SettingsController.getAppVersion
GET           /app/settings/maturityInstructions                                 controllers.admin.SettingsController.getMaturityInstructions(lang: String, ref: java.util.Optional[String])
GET           /app/settings/examinationQuitLink                                  controllers.admin.SettingsController.getExaminationQuitLink
GET           /app/settings/coursecodeprefix                                     controllers.admin.SettingsController.getCourseCodePrefix
GET           /app/settings/byodmaxparticipants                                  controllers.admin.SettingsController.getByodMaxParticipants


################# Statistics interface ##################

GET           /app/statistics/resbydate/:roomId/:from/:to                        controllers.admin.StatisticsController.getReservationsForRoomByDate(roomId: Long, from: String, to: String)
GET           /app/statistics/allexams/:from/:to                                 controllers.admin.StatisticsController.reportAllExams(from: String, to: String)
GET           /app/statistics/reviewsbydate/:from/:to                            controllers.admin.StatisticsController.getReviewsByDate(from: String, to: String)
GET           /app/statistics/teacherexamsbydate/:uid/:from/:to                  controllers.admin.StatisticsController.getTeacherExamsByDate(uid: Long, from: String, to: String)
GET           /app/statistics/examnames                                          controllers.admin.StatisticsController.getExamNames
GET           /app/statistics/examnames/:id/:reportType                          controllers.admin.StatisticsController.getExam(id: Long, reportType: String)
GET           /app/statistics/examenrollments/:id                                controllers.admin.StatisticsController.getExamEnrollments(id: Long)
GET           /app/statistics/student/:id/:from/:to                              controllers.admin.StatisticsController.reportStudentActivity(id: Long, from: String, to: String)

################# Reports interface ##################

GET           /app/reports/participations                                         controllers.admin.ReportController.getExamParticipations(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/reports/departments                                            controllers.admin.ReportController.listDepartments
GET           /app/reports/exams                                                  controllers.admin.ReportController.getPublishedExams(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/reports/reservations                                           controllers.admin.ReportController.getReservations(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/reports/reservations/iop                                       controllers.admin.ReportController.getIopReservations(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
GET           /app/reports/responses                                              controllers.admin.ReportController.getResponses(dept: java.util.Optional[String], start: java.util.Optional[String], end: java.util.Optional[String])
POST          /app/reports/questionreport/:id                                     controllers.admin.ReportController.exportExamQuestionScoresAsExcel(id: Long, request: Request)

################# Maintenance period interface ##################
GET           /app/maintenance                                                    controllers.facility.MaintenancePeriodController.listMaintenancePeriods
POST          /app/maintenance                                                    controllers.facility.MaintenancePeriodController.createMaintenancePeriod
PUT           /app/maintenance/:id                                                controllers.facility.MaintenancePeriodController.updateMaintenancePeriod(id: Long)
DELETE        /app/maintenance/:id                                                controllers.facility.MaintenancePeriodController.removeMaintenancePeriod(id: Long)

#######################################################
GET           /app/attributes                                                     controllers.user.SessionController.getAttributes(request: Request)

# static assets
GET           /*path                                                              controllers.assets.FrontendController.assetOrDefault(path)
